*** Settings ***
Variables         ../variables/delivery_control_objects.py
Resource          ../common/utilities.txt
Resource          gds_screen.txt

*** Keywords ***
Add Or Subtract X Days To Ticketing Date
    [Arguments]    ${ticketing_date}    ${add_or_subtract}    ${x_days}
    ${new_ticketing_date}    Run Keyword If    "${add_or_subtract.lower()}" =="add"    Add Days In Syex Format    ${ticketing_date}    ${x_days}
    ...    ELSE IF    "${add_or_subtract.lower()}" =="subtract"    Subtract Days In Syex Format    ${ticketing_date}    ${x_days}
    [Return]    ${new_ticketing_date}

Click On Hold Booking Reason Checkbox
    [Arguments]    ${object_name}
    Click Given Object Using Coords    ${object_name}
    Sleep    1

Convert Month From MMM To MM
    [Arguments]    ${month_MMM}
    Run Keyword If    '${month_MMM}' == 'JAN'    Set Suite Variable    ${month_MM}    01
    Run Keyword If    '${month_MMM}' == 'FEB'    Set Suite Variable    ${month_MM}    02
    Run Keyword If    '${month_MMM}' == 'MAR'    Set Suite Variable    ${month_MM}    03
    Run Keyword If    '${month_MMM}' == 'APR'    Set Suite Variable    ${month_MM}    04
    Run Keyword If    '${month_MMM}' == 'MAY'    Set Suite Variable    ${month_MM}    05
    Run Keyword If    '${month_MMM}' == 'JUN'    Set Suite Variable    ${month_MM}    06
    Run Keyword If    '${month_MMM}' == 'JUL'    Set Suite Variable    ${month_MM}    07
    Run Keyword If    '${month_MMM}' == 'AUG'    Set Suite Variable    ${month_MM}    08
    Run Keyword If    '${month_MMM}' == 'SEP'    Set Suite Variable    ${month_MM}    09
    Run Keyword If    '${month_MMM}' == 'OCT'    Set Suite Variable    ${month_MM}    10
    Run Keyword If    '${month_MMM}' == 'NOV'    Set Suite Variable    ${month_MM}    11
    Run Keyword If    '${month_MMM}' == 'DEC'    Set Suite Variable    ${month_MM}    12
    [Return]    ${month_MM}

Determine Selected On Hold Reason Code
    [Arguments]    ${on_hold_reason}
    ${is_checked}    ${is_enabled}    Run Keyword If    "${on_hold_reason.lower()}" == "awaiting secure flight data"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason0}
    ...    ELSE IF    "${on_hold_reason.lower()}" == "awaiting customer references"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason1}
    ...    ELSE IF    "${on_hold_reason.lower()}" == "awaiting fare details"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason2}
    ...    ELSE IF    "${on_hold_reason.lower()}" == "awaiting approval"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason3}
    ...    ELSE IF    "${on_hold_reason.lower()}" == "awaiting itinerary segment"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason4}
    ...    ELSE IF    "${on_hold_reason.lower()}" == "awaiting form of payment"    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason5}
    ...    ELSE    Log    Invalid On Hold Reason type...    WARN
    [Return]    ${is_checked}

Get Checkbox Status (Onhold Reasons)
    [Arguments]    ${obj_chkbox}
    ${pos_x} =    Control Get Pos X    ${title_power_express}    ${EMPTY}    ${obj_chkbox}
    ${pos_y} =    Control Get Pos Y    ${title_power_express}    ${EMPTY}    ${obj_chkbox}
    ${pos_x} =    Evaluate    ${pos_x} + 6
    ${pos_y} =    Evaluate    ${pos_y} + 9
    Auto It Set Option    PixelCoordMode    2
    ${color}    Pixel Get Color    ${pos_x}    ${pos_y}
    ${color}    Convert To Hex    ${color}
    Auto It Set Option    PixelCoordMode    0
    Set Test Variable    ${is_checked}    ${EMPTY}
    Set Test Variable    ${is_enabled}    ${EMPTY}
    Run Keyword If    "${color}" == "0" or "${color}" == "A0A0A0"    Set Test Variable    ${is_checked}    True
    ...    ELSE IF    "${color}" == "FFFFFF" or "${color}" == "F0F0F0"    Set Test Variable    ${is_checked}    False
    ...    ELSE    Log    Unable to verify if checkbox "${obj_chkbox}" is marked or not.    WARN
    ${is_enabled}    Control Command    ${title_power_express}    ${EMPTY}    ${obj_chkbox}    isEnabled    ${EMPTY}
    Run Keyword If    ${is_enabled} == 0    Set Test Variable    ${is_enabled}    False
    ...    ELSE    Set Test Variable    ${is_enabled}    True
    [Return]    ${is_checked}    ${is_enabled}

Get Current Date
    ${current_month}    Get Time    'month'    NOW
    ${current_day}    Get Time    'day'    NOW
    ${current_year}    Get Time    'year'    NOW
    ${current_month}    Convert to Integer    ${current_month}
    ${current_day}    Convert to Integer    ${current_day}
    ${current_year}    Convert to Integer    ${current_year}
    Set Suite Variable    ${current_month}
    Set Suite Variable    ${current_day}
    Set Suite Variable    ${current_year}

Get Default Ticketing Date
    ${actual_ticketing_date}    Get Control Text Value    ${date_ticketing}    ${title_power_express}
    Set Test Variable    ${default_ticketing_date}    ${actual_ticketing_date}

Get Email Address
    @{email_list}    Create List
    : FOR    ${field_index}    IN RANGE    0    20
    \    ${currvalue} =    Control Get Text    ${title_power_express}    ${EMPTY}    [NAME:ctxtEmail${field_index}]
    \    Append To List    ${email_list}    ${currvalue}
    \    Exit For Loop If    "${currvalue}"=="${EMPTY}"
    [Return]    ${email_list}

Get Email Address Field Index
    [Arguments]    ${email_address}
    ${email_dict}    Create Dictionary
    : FOR    ${email_field_index}    IN RANGE    0    10
    \    ${email_field_text}    Control Get Text    ${title_power_express}    ${EMPTY}    [NAME:ctxtEmail${email_field_index}]
    \    Set To Dictionary    ${email_dict}    ${email_field_text}    ${email_field_index}
    [Return]    ${email_dict}

Get LDT Month And Day
    ${ldt_marker}    Set Variable If    '${gds_switch}' == 'sabre'    LAST DAY TO PURCHASE    '${gds_switch}' == 'apollo'    LAST DATE TO PURCHASE TICKET:
    ${ldt_line}    Get Lines Containing String    ${gds_screen_data.strip()}    ${ldt_marker}
    Should Not Be Empty    ${ldt_line}    Could Not Find Last Date Ticketing From Fare Quote
    ${ldt_array}    Split String    ${ldt_line}    ${ldt_marker}
    ${ldt_line}    Remove All Spaces    ${ldt_array[1]}
    ${ldt_month}    Get Substring    ${ldt_line}    2    5
    ${ldt_day}    Get Substring    ${ldt_line}    0    2
    Set Test Variable    ${ldt_month}
    Set Test Variable    ${ldt_day}

Get LDT Month And Day For Multiple Fares
    ${ldt_marker}    Set Variable If    '${gds_switch}' == 'sabre'    LAST DAY TO PURCHASE    '${gds_switch}' == 'apollo'    LAST DATE TO PURCHASE TICKET:
    ${ldt_line}    Get Lines Containing String    ${gds_screen_data}    ${ldt_marker}
    ${ldt_array}    Split String    ${ldt_line}    ${ldt_marker}
    ${ldt1}    Remove All Spaces    ${ldt_array[1]}
    ${ldt2}    Remove All Spaces    ${ldt_array[2]}
    ${ldt1_month}    Get Substring    ${ldt1}    2    5
    ${ldt1_day}    Get Substring    ${ldt1}    0    2
    ${ldt2_month}    Get Substring    ${ldt2}    2    5
    ${ldt2_day}    Get Substring    ${ldt2}    0    2
    Set Test Variable    ${ldt1_month}
    Set Test Variable    ${ldt1_day}
    Set Test Variable    ${ldt2_month}
    Set Test Variable    ${ldt2_day}

Get LDT-1 From GDS
    Run Keyword If    '${gds_switch}' == 'sabre'    Get Price Quote
    ...    ELSE    Get Data From GDS Screen
    Get LDT Month And Day
    Get Ticketing Date Year    ${ldt_month}    ${ldt_day}
    ${ldt}    Convert Date To Syex Format    ${ldt_month}${ldt_day}${date_year}    %b%d%Y
    ${ldt-1}    Add Or Subtract X Days To Ticketing Date    ${ldt}    subtract    1
    Set Suite Variable    ${ldt}
    Set Suite Variable    ${ldt-1}

Get LDT-1 From GDS For Multiple Fares
    Get Data From GDS Screen
    Get LDT Month And Day For Multiple Fares
    Get Ticketing Date Year    ${ldt1_month}    ${ldt1_day}
    Set Test Variable    ${year1}    ${date_year}
    Get Ticketing Date Year    ${ldt2_month}    ${ldt2_day}
    Set Test Variable    ${year2}    ${date_year}
    ${ldt1}    Convert Date To Timestamp Format    ${ldt1_month}${ldt1_day}${year1}    %b%d%Y
    ${ldt2}    Convert Date To Timestamp Format    ${ldt2_month}${ldt2_day}${year2}    %b%d%Y
    ${compare_ldt}    Subtract Date From Date    ${ldt1}    ${ldt2}
    ${ldt}    Set Variable If    "${compare_ldt}" <= "0"    ${ldt1}    ${ldt2}
    ${ldt}    Convert Date To Syex Format    ${ldt}    %Y-%m-%d
    ${ldt-1}    Add Or Subtract X Days To Ticketing Date    ${ldt}    subtract    1
    Set Suite Variable    ${ldt}
    Set Suite Variable    ${ldt-1}

Get Price Quote
    Enter Specific Command On Native GDS    *PQ
    ${gds_screen_data}    Get Clipboard Data Sabre
    Set Test Variable    ${gds_screen_data}    ${gds_screen_data.strip()}

Get Ticketing Date Year
    [Arguments]    ${month_val}    ${day_val}
    ${month}    Convert Month From MMM To MM    ${month_val}
    ${month}    Convert to Integer    ${month}
    ${day}    Convert to Integer    ${day_val}
    Get Current Date
    ${current_year+1}    Evaluate    ${current_year}+1
    ${compare_day}    Evaluate    ${current_day}-${day}
    ${compare_month}    Evaluate    ${current_month}-${month}
    Run Keyword if    "${compare_month}" < "0"    Set Test Variable    ${date_year}    ${current_year}
    Run Keyword if    "${compare_month}" > "0"    Set Test Variable    ${date_year}    ${current_year+1}
    Run Keyword if    "${compare_month}" == "0" and "${compare_day}" == "0"    Set Test Variable    ${date_year}    ${current_year}
    Run Keyword if    "${compare_month}" == "0" and "${compare_day}" > "0"    Set Test Variable    ${date_year}    ${current_year+1}
    Run Keyword if    "${compare_month}" == "0" and "${compare_day}" < "0"    Set Test Variable    ${date_year}    ${current_year}

Get Ticketing Time Limit Value
    ${ticketing_time_limit_value}    Get Control Text Value    [NAME:ccboTimeLimit]
    Set Test Variable    ${ticketing_time_limit_value}

Get Time Limit Remarks Value
    ${time_limit_remarks_value}    Get Control Text Value    [NAME:ctxtTimeRemarks]
    Set Test Variable    ${time_limit_remarks_value}

Get Travel Date Month and Day
    [Arguments]    ${travel_date}=${EMPTY}
    Run Keyword If    "${travel_date}" == "${EMPTY}"    Set Test Variable    ${travel_date}    ${departure_date}
    ${dep_month}    Get Substring    ${travel_date}    2    5
    ${dep_day}    Get Substring    ${travel_date}    0    2
    Set Test Variable    ${dep_month}
    Set Test Variable    ${dep_day}

Get Travel Date-1
    [Arguments]    ${travel_date}=${EMPTY}
    Run Keyword If    "${travel_date}" == "${EMPTY}"    Get Travel Date Month and Day    ${EMPTY}
    ...    ELSE    Get Travel Date Month and Day    ${travel_date}
    Get Ticketing Date Year    ${dep_month}    ${dep_day}
    ${travel_date}    Convert Date To Syex Format    ${dep_month}${dep_day}${date_year}    %b%d%Y
    ${travel_date-1}    Add Or Subtract X Days To Ticketing Date    ${travel_date}    subtract    1
    Set Suite Variable    ${travel_date}
    Set Suite Variable    ${travel_date-1}

Populate Delivery Panel With Default Values
    [Arguments]    ${recipient1}=automation@carlsonwagonlit.com
    Set Email Address in Delivery Panel    ${recipient1}
    ${is_delivery_method_present} =    Control Command    ${title_power_express}    ${EMPTY}    ${combo_deliverMethod}    IsEnabled    ${EMPTY}
    Run Keyword Unless    ${is_delivery_method_present} == 0    Select Delivery Method Using Default Value
    ${is_onhold_reason_present} =    Control Command    ${title_power_express}    ${EMPTY}    ${check_box_holdreason3}    IsEnabled    ${EMPTY}
    Run Keyword Unless    ${is_onhold_reason_present} == 0    Select On Hold Booking Reasons Using Default Value
    ${is_ticketing_date_present} =    Control Command    ${title_power_express}    ${EMPTY}    ${date_ticketing}    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_ticketing_date_present} == 0    Set Ticketing Date    6
    Set Test Variable    ${is_delivery_panel_already_populated}    ${True}
    [Teardown]    Take Screenshot

Populate Delivery Panel With Specific Delivery Method
    [Arguments]    ${delivery_method}
    Select Delivery Method    ${delivery_method}
    Set Email Address In Delivery Panel
    [Teardown]    Take Screenshot

Populate Delivery Panel Without On Hold Reason
    Set Email Address in Delivery Panel
    Sleep    1
    Select Delivery Method Using Default Value
    ${is_ticketing_date_present} =    Control Command    ${title_power_express}    ${EMPTY}    ${date_ticketing}    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_ticketing_date_present} == 0    Set Ticketing Date    6
    [Teardown]    Take Screenshot

Remove Email Address
    [Arguments]    @{email_address}
    : FOR    ${email}    IN    @{email_address}
    \    ${email_dict}    Get Email Address Field Index    ${email}
    \    ${is_email_present}    Run Keyword And Return Status    Dictionary Should Contain Key    ${email_dict}    ${email}
    \    ${email_index} =    Run Keyword If    ${is_email_present} == True    Get From Dictionary    ${email_dict}    ${email}
    \    Run Keyword If    ${is_email_present} == True    Set Control Text Value    [NAME:ctxtEmail${email_index}]    ${EMPTY}

Replace Existing Email Address
    [Arguments]    ${expexted_email}    ${email}
    : FOR    ${field_index}    IN RANGE    1    20
    \    ${currvalue} =    Control Get Text    ${title_power_express}    ${EMPTY}    [NAME:ctxtEmail${field_index}]
    \    Run Keyword If    "${currvalue}"=="${expexted_email}"    Set Control Text Value    [NAME:ctxtEmail${field_index}]    ${email}
    \    Exit For Loop If    "${currvalue}"=="${expexted_email}"

Select Delivery Method
    [Arguments]    ${delivery_method}
    Select Value From Dropdown List    [NAME:ccboDeliveryMethod]    ${delivery_method}
    Set Test Variable    ${delivery_method}
    [Teardown]    Take Screenshot

Select Delivery Method Using Default Value
    @{delivery_method_values} =    Get Value From Dropdown List    ${combo_deliverMethod}
    : FOR    ${INDEX}    IN RANGE    1    10
    \    ${contains_etkt} =    Run Keyword And Return Status    List Should Contain Value    ${delivery_method_values}    E-Ticket
    \    Run Keyword If    ${contains_etkt} == True    Run Keywords    Select Value From Dropdown List    ${combo_deliverMethod}    E-Ticket
    \    ...    AND    Exit For Loop
    \    ${contains_eticket} =    Run Keyword And Return Status    List Should Contain Value    ${delivery_method_values}    AUTOETIX
    \    Run Keyword If    ${contains_eticket} == True    Run Keywords    Select Value From Dropdown List    ${combo_deliverMethod}    AUTOETIX
    \    ...    AND    Exit For Loop
    \    ${contains_autoetix} =    Run Keyword And Return Status    List Should Contain Value    ${delivery_method_values}    ETKT
    \    Run Keyword If    ${contains_autoetix} == True    Run Keywords    Select Value From Dropdown List    ${combo_deliverMethod}    ETKT
    \    ...    AND    Exit For Loop
    \    ${contains_etktair} =    Run Keyword And Return Status    List Should Contain Value    ${delivery_method_values}    ETKT AIR
    \    Run Keyword If    ${contains_etktair} == True    Run Keywords    Select Value From Dropdown List    ${combo_deliverMethod}    ETKT AIR
    \    ...    AND    Exit For Loop
    \    ${contains_autoticket} =    Run Keyword And Return Status    List Should Contain Value    ${delivery_method_values}    AUTO TICKET
    \    Run Keyword If    ${contains_autoticket} == True    Run Keywords    Select Value From Dropdown List    ${combo_deliverMethod}    AUTO TICKET
    \    ...    AND    Exit For Loop
    \    Run Keywords    Send    {DOWN}{ENTER}
    \    ...    AND    Exit For Loop
    [Teardown]    Take Screenshot

Select On Hold Booking Reasons
    [Arguments]    ${on_hold_reason}=${EMPTY}
    Comment    ${on_hold_reason}    Get Variable Value    ${on_hold_reason}    ${on_hold_reason}
    Run Keyword If    "${on_hold_reason}" == ""    Run Keyword and Continue On Failure    FAIL    Failed: No Specified On Hold Booking Reason
    Sleep    1
    ${isChecked0}    ${isEnabled0}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason0}
    ${isChecked1}    ${isEnabled1}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason1}
    ${isChecked2}    ${isEnabled2}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason2}
    ${isChecked3}    ${isEnabled3}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason3}
    ${isChecked4}    ${isEnabled4}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason4}
    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data" and "${isChecked0}" == "False" and "${isEnabled0}" == "True"    Click On Hold Booking Reason Checkbox    ${check_box_holdreason0}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References" and "${isChecked1}" == "False" and "${isEnabled1}" == "True"    Click On Hold Booking Reason Checkbox    ${check_box_holdreason1}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details" and "${isChecked2}" == "False" and "${isEnabled2}" == "True"    Click On Hold Booking Reason Checkbox    ${check_box_holdreason2}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval" and "${isChecked3}" == "False" and "${isEnabled3}" == "True"    Click On Hold Booking Reason Checkbox    ${check_box_holdreason3}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment" and "${isChecked4}" == "False" and "${isEnabled4}" == "True"    Click On Hold Booking Reason Checkbox    ${check_box_holdreason4}
    ...    ELSE    Log    No on hold booking reason was marked. Please review screenshot.    WARN
    Sleep    1
    Run Keyword If    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Control Set Text    ${title_power_express}    ${EMPTY}    ${edit_awaiting_itinerary_segment}    ${awaiting_itinerary_segment}
    Verify At Least 1 On Hold Booking Reason is Marked
    [Teardown]    Take Screenshot

Select On Hold Booking Reasons Using Default Value
    ${is_awaiting_approval_checked}    ${is_awaiting_approval_enabled}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason3}
    Run Keyword If    '${is_awaiting_approval_checked}' == 'False' and '${is_awaiting_approval_enabled}' == 'True'    Click On Hold Booking Reason Checkbox    ${check_box_holdreason3}
    Verify At Least 1 On Hold Booking Reason is Marked
    [Teardown]    Take Screenshot

Select Ticketing Time Limit
    [Arguments]    ${expected_ticketing_time_limit_value}
    Select Value From Dropdown List    [NAME:ccboTimeLimit]    ${expected_ticketing_time_limit_value}

Set Email Address In Delivery Panel
    [Arguments]    ${recipient1}=automation@carlsonwagonlit.com
    ${recipient1_value}    Get Variable Value    ${recipient1}
    : FOR    ${index}    IN RANGE    0    20
    \    Control Click    ${title_power_express}    ${EMPTY}    [NAME:ctxtEmail${index}]
    \    ${InvoiceIsVisible}    Control Command    ${title_power_express}    ${EMPTY}    [NAME:chkInvoice${index}]    IsVisible
    \    ...    ${EMPTY}
    \    ${ItinIsVisible}    Control Command    ${title_power_express}    ${EMPTY}    [NAME:cchkItinerary${index}]    IsVisible
    \    ...    ${EMPTY}
    \    Run Keyword If    "${ItinIsVisible}" == "0"    Exit For Loop
    \    ${InvoiceChckStatus}    Get Checkbox Status    [NAME:chkInvoice${index}]
    \    ${ItinChckStatus}    Get Checkbox Status    [NAME:cchkItinerary${index}]
    \    Run Keyword If    "${InvoiceChckStatus}" == "True"    Control Click    ${title_power_express}    ${EMPTY}    [NAME:chkInvoice${index}]
    \    Run Keyword If    "${ItinChckStatus}" == "True"    Control Click    ${title_power_express}    ${EMPTY}    [NAME:cchkItinerary${index}]
    Control Set Text    ${title_power_express}    ${EMPTY}    ${text_recipient_default}    ${recipient1_value}
    Control Click    ${title_power_express}    ${EMPTY}    ${check_box_addrecipients}
    Control Click    ${title_power_express}    ${EMPTY}    ${check_box_primaryinvoice}
    [Teardown]    Take Screenshot

Set Follow Up Date X Day Ahead
    [Arguments]    ${number_of_days}=2
    ${ticketing_date} =    Add Days To Current Date In Syex Format    ${number_of_days}
    ${month} =    Fetch From Left    ${ticketing_date}    /
    ${year} =    Fetch From Right    ${ticketing_date}    /
    ${day} =    Fetch From Left    ${ticketing_date}    /${year}
    ${day} =    Fetch From Right    ${day}    /
    Click Control Button    ${date_followup}    ${title_power_express}
    Send    ${year}    1
    Send    {LEFT}
    Send    ${day}    1
    Send    {LEFT}
    Send    ${month}    1
    Sleep    1
    Send    {TAB}
    Sleep    1

Set Subject Line Value
    [Arguments]    ${SubjectLine}
    Select Value From Dropdown List    [NAME:cboSubjectLine]    ${SubjectLine}

Set Header Text
    [Arguments]    ${header_text}
    ${header_text_field}    Determine Multiple Object Name Based On Active Tab    txtHeader    False
    Set Control Text Value    ${header_text_field}    ${header_text}
    Take Screenshot

Set Ticket Text
    [Arguments]    ${ticket_text}
    ${ticket_text_field}    Determine Multiple Object Name Based On Active Tab    txtTicket    False
    Set Control Text Value    ${ticket_text_field}    ${ticket_text}
    Take Screenshot

Set Ticketing Date
    [Arguments]    ${number_of_months}
    ${actual_ticketing_date}    Get Control Text Value    ${date_ticketing}    ${title_power_express}
    Set Test Variable    ${actual_ticketing_date}
    ${ticketing_date} =    Set Departure Date X Months From Now In Syex Format    ${number_of_months}
    Set Test Variable    ${ticketing_date}
    Run Keyword Unless    '${actual_ticketing_date}' == '${ticketing_date}'    Set Ticketing Date X Months From Now    ${number_of_months}
    ${actual_ticketing_date}    Get Control Text Value    ${date_ticketing}    ${title_power_express}
    Set Test Variable    ${actual_ticketing_date}
    ${ticketing_date_in_gds_format}    Convert Date To Gds Format    ${actual_ticketing_date}    %m/%d/%Y
    Set Test Variable    ${ticketing_date_in_gds_format}

Set Ticketing Date One Day Ahead
    ${ticketing_date} =    Add Days To Current Date In Syex Format    1
    ${month} =    Fetch From Left    ${ticketing_date}    /
    ${year} =    Fetch From Right    ${ticketing_date}    /
    ${day} =    Fetch From Left    ${ticketing_date}    /${year}
    ${day} =    Fetch From Right    ${day}    /
    Click Control Button    ${date_ticketing}    ${title_power_express}
    Send    ${year}    1
    Send    {LEFT}
    Send    ${day}    1
    Send    {LEFT}
    Send    ${month}    1
    Sleep    1
    Send    {TAB}
    Sleep    1
    [Teardown]    Take Screenshot

Set Ticketing Date To LDT+1
    ${ldt+1}    Add Or Subtract X Days To Ticketing Date    ${ldt}    add    1
    Set Ticketing Date Using Actual Value    ${ldt+1}

Set Ticketing Date To LDT-1
    Set Ticketing Date Using Actual Value    ${ldt-1}

Set Ticketing Date To Travel Date+1
    ${travel_date+1}    Add Or Subtract X Days To Ticketing Date    ${travel_date}    Add    1
    Set Ticketing Date Using Actual Value    ${travel_date+1}

Set Ticketing Date To Travel Date-1
    Set Ticketing Date Using Actual Value    ${travel_date-1}

Set Ticketing Date Using Actual Value
    [Arguments]    ${actual_ticketing_date}
    ${month} =    Fetch From Left    ${actual_ticketing_date}    /
    ${year} =    Fetch From Right    ${actual_ticketing_date}    /
    ${day} =    Fetch From Left    ${actual_ticketing_date}    /${year}
    ${day} =    Fetch From Right    ${day}    /
    Click Control Button    ${date_ticketing}    ${title_power_express}
    Send    ${year}    1
    Send    {LEFT}
    Send    ${day}    1
    Send    {LEFT}
    Send    ${month}    1
    Sleep    1
    Send    {TAB}
    Sleep    1
    [Teardown]    Take Screenshot

Set Ticketing Date Using Current Date
    ${ticketing_date} =    ExtendedCustomSyExLibrary.Get Current Date
    ${month} =    Fetch From Left    ${ticketing_date}    /
    ${year} =    Fetch From Right    ${ticketing_date}    /
    ${day} =    Fetch From Left    ${ticketing_date}    /${year}
    ${day} =    Fetch From Right    ${day}    /
    Click Control Button    ${date_ticketing}    ${title_power_express}
    Send    ${year}    1
    Send    {LEFT}
    Send    ${day}    1
    Send    {LEFT}
    Send    ${month}    1
    Sleep    1
    Send    {TAB}
    Sleep    2
    ${delivery_method}    Get Control Text Value    ${combo_deliverMethod}
    ${is_not_auto_ticket}    Run Keyword And Return Status    Should Not Contain    ${delivery_method.upper()}    AUTO
    Should Be True    ${is_not_auto_ticket}    Unable to proceed. Auto Ticket delivery method is selected and ticketing date is set to current date.

Set Ticketing Date X Months From Now
    [Arguments]    ${number_of_months}
    ${month} =    Fetch From Left    ${ticketing_date}    /
    ${year} =    Fetch From Right    ${ticketing_date}    /
    ${day} =    Fetch From Left    ${ticketing_date}    /${year}
    ${day} =    Fetch From Right    ${day}    /
    Click Control Button    ${date_ticketing}    ${title_power_express}
    Sleep    1
    Send    ${year}    1
    Send    {LEFT}
    Send    ${day}    1
    Send    {LEFT}
    Send    ${month}    1
    Sleep    1
    Send    {TAB}
    Sleep    1
    ${is_error_present} =    Control Command    ${title_power_express}    ${EMPTY}    [REGEXPCLASS:WindowsForms10.Window.8.app.*;INSTANCE:21]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_error_present} == 0    Set Ticketing Date One Day Ahead
    ${is_error_present} =    Control Command    ${title_power_express}    ${EMPTY}    [REGEXPCLASS:WindowsForms10.Window.8.app.*;INSTANCE:21]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_error_present} == 0    Set Ticketing Date Using Actual Value    ${actual_ticketing_date}
    ${is_error_present} =    Control Command    ${title_power_express}    ${EMPTY}    [REGEXPCLASS:WindowsForms10.Window.8.app.*;INSTANCE:21]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_error_present} == 0    Set Ticketing Date Using Current Date

Set Time Limit Remarks
    [Arguments]    ${expected_time_limit_remarks_value}
    Set Control Text Value    [NAME:ctxtTimeRemarks]    ${expected_time_limit_remarks_value}

Tick Awaiting Approval
    [Arguments]    ${tick_action}
    Run Keyword If    '${tick_action.lower()}' == 'tick'    Click Control Button    ${check_box_holdreason3}    ${title_power_express}
    ...    ELSE    No Operation
    Sleep    1
    Run Keyword If    '${tick_action.lower()}' == 'tick'    Send    {SPACE}
    Sleep    1

Tick Do Not Send To OBT Checkbox
    Tick Checkbox    ${check_box_do_not_send_to_OBT}

Tick On Hold Reasons
    [Arguments]    @{on_hold_reasons}
    [Documentation]    Use ALL value if you want to remove all On Hold Reasons
    : FOR    ${on_hold_reason}    IN    @{on_hold_reasons}
    \    Tick Checkbox Via Description    ${on_hold_reason}    1

Tick Receive Invoice Checkbox
    Wait Until Control Object Is Visible    ${check_box_primaryinvoice}
    ${checkbox_status}    Get checkbox status    ${check_box_primaryinvoice}
    Run Keyword If    '${checkbox_status}' == 'False'    Tick Checkbox    ${check_box_primaryinvoice}

Tick Receive Itinerary Checkbox
    Wait Until Control Object Is Visible    ${check_box_addrecipients}
    ${checkbox_status}    Get checkbox status    ${check_box_addrecipients}
    Run Keyword If    '${checkbox_status}' == 'False'    Tick Checkbox    ${check_box_addrecipients}
    [Teardown]    Take Screenshot

Untick All On Hold Reasons
    Wait Until Control Object Is Visible    [NAME:grpHoldBooking]
    : FOR    ${onhold_field_index}    IN RANGE    10
    \    ${is_checked}    ${is_enabled}    Get Checkbox Status (Onhold Reasons)    [NAME:UchkHoldReason${onhold_field_index}]
    \    Run Keyword If    "${is_checked}" == "True" and "${is_enabled}" == "True"    Click Given Object Using Coords    [NAME:UchkHoldReason${onhold_field_index}]
    \    Exit For Loop If    "${is_checked}" == "${EMPTY}"

Untick Do Not Send Itinerary Checkbox
    Untick Checkbox    ${check_box_do_not_send_itinerary}

Untick On Hold Reasons
    [Arguments]    @{on_hold_reasons}
    : FOR    ${on_hold_reason}    IN    @{on_hold_reasons}
    \    Untick Checkbox Via Description    ${on_hold_reason}    1

Verify At Least 1 On Hold Booking Reason Is Marked
    ${isChecked0}    ${isEnabled0}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason0}
    ${isChecked1}    ${isEnabled1}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason1}
    ${isChecked2}    ${isEnabled2}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason2}
    ${isChecked3}    ${isEnabled3}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason3}
    ${isChecked4}    ${isEnabled4}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason4}
    Run Keyword If    "${isEnabled0}" == "True" or "${isEnabled1}" == "True" or "${isEnabled2}" == "True" or "${isEnabled3}" == "True" or "${isEnabled4}" == "True"    Set Test Variable    ${isEnabled}    True
    ...    ELSE    Set Test Variable    ${isEnabled}    False
    Run Keyword If    "${isChecked0}" != "True" and "${isChecked1}" != "True" and "${isChecked2}" != "True" and "${isChecked3}" != "True" and "${isChecked4}" != "True" and "${isEnabled}" == "True"    Log    None of the on hold booking reason is marked. Cannot proceed with booking as a precaution.

Verify Delivery Panel Emails
    [Arguments]    @{expected_text_value}
    @{email_list}    Get Email Address
    : FOR    ${email}    IN    @{expected_text_value}
    \    List Should Contain Value    ${email_list}    ${email}
    [Teardown]    Take Screenshot
