*** Settings ***
Resource          common_library.txt

*** Keywords ***
Click Control Button
    [Arguments]    ${control_object}    ${window_title}=${title_power_express}    ${ignore_verification}=False
    Run Keyword If    "${ignore_verification}" == "False"    Wait Until Keyword Succeeds    60    1    Verify Control Object Is Visible    ${control_object}
    ...    ${window_title}
    Control Focus    ${window_title}    ${EMPTY}    ${control_object}
    Control Click    ${window_title}    ${EMPTY}    ${control_object}

Click Given Object Using Coords
    [Arguments]    ${given_obj}
    ${xpos} =    Control Get Pos X    ${title_active_window}    ${EMPTY}    ${given_obj}
    ${ypos} =    Control Get Pos Y    ${title_active_window}    ${EMPTY}    ${given_obj}
    ${hpos} =    Control Get Pos Height    ${title_active_window}    ${EMPTY}    ${given_obj}
    ${wpos} =    Control Get Pos Width    ${title_active_window}    ${EMPTY}    ${given_obj}
    ${wpos} =    Evaluate    ${wpos} / 2
    ${hpos} =    Evaluate    ${hpos} / 2
    ${xpos} =    Evaluate    ${xpos} + ${wpos}
    ${ypos} =    Evaluate    ${ypos} + ${hpos}
    Auto It Set Option    MouseCoordMode    2
    Win Activate    ${title_power_express}    ${EMPTY}
    Run Keyword If    ${xpos} > 1 and ${ypos} > 1    Mouse Click    LEFT    ${xpos}    ${ypos}
    ...    ELSE    Log    ${given_obj} is not visible    WARN
    Auto It Set Option    MouseCoordMode    0
    Sleep    0.5

Confirm Popup Window
    [Arguments]    ${popup_window}=${EMPTY}
    ${ok_button_exists} =    Control Command    ${popup_window}    ${EMPTY}    [NAME:OKBtn]    IsVisible    ${EMPTY}
    ${yes_button_exists} =    Control Command    ${popup_window}    ${EMPTY}    [NAME:YesBtn]    IsVisible    ${EMPTY}
    ${btn_ok_button_exists} =    Control Command    ${popup_window}    ${EMPTY}    [NAME:btnOKButton]    IsVisible    ${EMPTY}
    Run Keyword If    ${ok_button_exists} == 1    Click Control Button    [NAME:OKBtn]    ${popup_window}
    ...    ELSE IF    ${yes_button_exists} == 1    Click Control Button    [NAME:YesBtn]    ${popup_window}
    ...    ELSE IF    ${btn_ok_button_exists} == 1    Click Control Button    [NAME:btnOKButton]    ${popup_window}

Connect To Power Express Database
    [Arguments]    ${schema}=ApplicationUsage_Test
    Set Log Level    NONE
    ${dbusername}=    RSALibrary.B 64 Decode    ${dbusername}
    ${dbpassword}=    RSALibrary.B 64 Decode    ${dbpassword}
    DatabaseLibrary.Connect To Database    pymssql    ${schema}    ${dbusername}    ${dbpassword}    ${dbhost}    ${dbport}
    Set Log Level    INFO

Connect To Syex Sandbox Pilot DB
    [Arguments]    ${schema}=ApplicationUsage_Sandbox_Pilot
    Set Log Level    NONE
    ${dbusername}=    RSALibrary.B 64 Decode    ${dbusername_sandboxpilot}
    ${dbpassword}=    RSALibrary.B 64 Decode    ${dbpassword_sandboxpilot}
    DatabaseLibrary.Connect To Database    pymssql    ${schema}    ${dbusername}    ${dbpassword}    ${dbhost_sandboxpilot}    ${dbport}
    Set Log Level    INFO

Convert English Date To French
    [Arguments]    ${flight_date}
    Set Variable    ${flight_date}    ${flight_date.strip()}
    ${month_english}    Remove All Integer    ${flight_date}
    ${month_french}    Set Variable If    "${month_english}" == "JAN"    JAN.    "${month_english}" == "FEB"    FÉVR.    "${month_english}" == "MAR"
    ...    MARS    "${month_english}" == "APR"    AVR.    "${month_english}" == "MAY"    MAI.    "${month_english}" == "JUN"
    ...    JUIN.    "${month_english}" == "JUL"    JUIL.    "${month_english}" == "AUG"    AOÛT    "${month_english}" == "SEP"
    ...    SEPT.    "${month_english}" == "OCT"    OCT.    "${month_english}" == "NOV"    NOV.    "${month_english}" == "DEC"
    ...    DÉC.
    ${flight_date}    Replace String    ${flight_date}    ${month_english}    ${month_french}
    Set Test Variable    ${flight_date}

Convert French Date To English
    [Arguments]    ${flight_date}
    Set Variable    ${flight_date}    ${flight_date.strip()}
    ${month_french}    Remove All Integer    ${flight_date}
    ${month_english}    Set Variable If    "${month_french}" == "JANV." or "${month_french}" == "JAN"    JAN    "${month_french}" == "FEVR." or "${month_french}" == "FÉB" or "${month_french}" == "FEB"    FEB    "${month_french}" == "MARS" or "${month_french}" == "MAR"
    ...    MAR    "${month_french}" == "AVRIL" or "${month_french}" == "APR" or "${month_french}" == "AVR" or "${month_french}" == "AVR."    APR    "${month_french}" == "MAI" or "${month_french}" == "MAY"    MAY    "${month_french}" == "JUIN" or "${month_french}" == "JUN"
    ...    JUN    "${month_french}" == "JUIL." or "${month_french}" == "JUL" or "${month_french}" == "JUIL."    JUL    "${month_french}" == "AOÛT" or "${month_french}" == "AUG"    AUG    "${month_french}" == "SEPT." or "${month_french}" == "SEP"
    ...    SEP    "${month_french}" == "OCT." or "${month_french}" == "OCT"    OCT    "${month_french}" == "NOV." or "${month_french}" == "NOV"    NOV    "${month_french}" == "DÉC." or "${month_french}" == "DEC" or "${month_french}" == "DEC."
    ...    DEC
    ${flight_date}    Replace String    ${flight_date}    ${month_french}    ${month_english}
    Set Test Variable    ${flight_date}

Create City Name Query Statement
    [Arguments]    @{city_route}
    ${previous}    Set Variable    ${EMPTY}
    : FOR    ${city_code}    IN    @{city_route}
    \    ${query}    Set Variable    SELECT c.Name FROM TravelPort t INNER JOIN City c ON t.CityCode = c.CityCode WHERE t.TravelPortCode = '${city_code}'
    \    ${catenated_value}    Catenate    ${previous}    ${query}
    \    ${previous}    Set Variable    ${catenated_value}
    ${query_statement}    Replace String    ${catenated_value.lstrip()}    ${SPACE}SELECT    ${SPACE}UNION ALL SELECT
    [Teardown]
    [Return]    ${query_statement}

Determine Control Object Background Color
    [Arguments]    ${object}    ${xadd}=0    ${yadd}=0
    ${x}    Control Get Pos X    ${title_power_express}    ${EMPTY}    ${object}
    ${width}    Control Get Pos Width    ${title_power_express}    ${EMPTY}    ${object}
    ${width}    Evaluate    ${width}/2
    ${x}    Evaluate    ${x}+${width}+${xadd}
    ${y}    Control Get Pos Y    ${title_power_express}    ${EMPTY}    ${object}
    ${height}    Control Get Pos Height    ${title_power_express}    ${EMPTY}    ${object}
    ${height}    Evaluate    ${height}/2
    ${y}    Evaluate    ${y}+${height}+${yadd}
    Auto It Set Option    PixelCoordMode    2
    ${actual_bgcolor}    Pixel Get Color    ${x}    ${y}
    Auto It Set Option    PixelCoordMode    0
    ${actual_bgcolor}    Convert To Hex    ${actual_bgcolor}
    [Return]    ${actual_bgcolor}

Determine Control Object Is Visible On Active Tab
    [Arguments]    ${obj_name}    ${default_control_counter}=True
    Set Test Variable    ${is_obj_visible}    ${EMPTY}
    Set Test Variable    ${object_status}    False
    @{actual_obj_list}    Split String    ${obj_name}    ,
    : FOR    ${index}    IN RANGE    1    20
    \    ${object_name}    ${is_obj_visible}    Verify Multiple Object Name is Visible On Active Tab    ${actual_obj_list}    ${index}    ${default_control_counter}
    \    Run Keyword If    ${is_obj_visible} == 1    Run Keywords    Set Test Variable    ${object_status}    True
    \    ...    AND    Exit For Loop
    [Return]    ${object_status}

Determine Multiple Object Name Based On Active Tab
    [Arguments]    ${obj_name}    ${default_control_counter}=True    ${field_instance}=${EMPTY}
    Log    ${obj_name}
    Win Activate    ${title_power_express}    ${EMPTY}
    @{actual_obj_list}    Split String    ${obj_name}    ,
    : FOR    ${index}    IN RANGE    1    11
    \    ${object_name}    ${is_obj_visible}    Verify Multiple Object Name is Visible On Active Tab    ${actual_obj_list}    ${index}    ${default_control_counter}
    \    ...    ${field_instance}
    \    Log    ${object_name}
    \    Log    ${is_obj_visible}
    \    Exit For Loop If    ${is_obj_visible} == 1
    [Return]    ${object_name}

Execute Query
    [Arguments]    ${sql_query}    ${schema}
    Connect To Power Express Database    ${schema}
    @{queryResults}    Query    ${sql_query}
    Disconnect From Database
    [Return]    @{queryResults}

Get Checkbox Status
    [Arguments]    ${obj_chkbox}    ${reset_mouse}=false
    Run Keyword If    "${reset_mouse.lower()}" == "true"    Mouse Move    0    0
    ${pos_x} =    Control Get Pos X    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_y} =    Control Get Pos Y    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_hght} =    Control Get Pos Height    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_width} =    Control Get Pos Width    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_width_right} =    Evaluate    ${pos_width} - 6
    ${hght_remainder} =    Evaluate    ${pos_hght} % 2
    ${wdth_remainder} =    Evaluate    ${pos_width} % 2
    ${pos_hght} =    Evaluate    ${pos_hght} / 2
    ${pos_width} =    Evaluate    ${pos_width} / 2
    ${pos_hght} =    Run Keyword If    ${hght_remainder} > 0    Evaluate    ${pos_hght} + 1
    ...    ELSE    Evaluate    ${pos_hght} + 0
    ${pos_width} =    Run Keyword If    ${wdth_remainder} > 0    Evaluate    ${pos_width} + 1
    ...    ELSE    Evaluate    ${pos_width} + 0
    ${pos_x_left} =    Evaluate    ${pos_x} + 8
    ${pos_x_right} =    Evaluate    ${pos_x} + ${pos_width_right}
    ${pos_x} =    Evaluate    ${pos_x} + ${pos_width}
    ${pos_y_left} =    Evaluate    ${pos_y} + ${pos_hght} - 1
    ${pos_y} =    Evaluate    ${pos_y} + ${pos_hght}
    Auto It Set Option    PixelCoordMode    2
    ${is_checked_center}    Pixel Get Color    ${pos_x}    ${pos_y}
    ${is_checked_center}    Convert To Hex    ${is_checked_center}
    ${is_checked_left}    Pixel Get Color    ${pos_x_left}    ${pos_y_left}
    ${is_checked_left}    Convert To Hex    ${is_checked_left}
    ${is_checked_right}    Pixel Get Color    ${pos_x_right}    ${pos_y_left}
    ${is_checked_right}    Convert To Hex    ${is_checked_right}
    Auto It Set Option    PixelCoordMode    1
    Run Keyword If    "${is_checked_center}" == "B7BFD5" or "${is_checked_center}" == "9EA9C8" or "${is_checked_left}" == "B7BFD5" or "${is_checked_right}" == "B7BFD5"    Set Test Variable    ${is_checked}    True
    ...    ELSE    Set Test Variable    ${is_checked}    False
    [Return]    ${is_checked}

Get City Name
    [Arguments]    @{city_code}
    Connect To Power Express Database    Desktop_Test
    ${query_statement}    Create City Name Query Statement    @{city_code}
    ${city_names_query}    Query    ${query_statement}
    ${previous_city}    Set Variable    ${EMPTY}
    ${previous_city_with_dash}    Set Variable    ${EMPTY}
    ${previous_city_with_slash}    Set Variable    ${EMPTY}
    ${city_length}    Get Length    ${city_code}
    : FOR    ${INDEX}    IN RANGE    ${city_length}
    \    ${city_names}    Catenate    ${previous_city}    ${city_names_query[${INDEX}][0]}
    \    ${city_names_with_dash}    Catenate    SEPARATOR=+    ${previous_city_with_dash}    ${city_names_query[${INDEX}][0]}
    \    ${city_names_with_slash}    Catenate    SEPARATOR=/    ${previous_city_with_slash}    ${city_names_query[${INDEX}][0]}
    \    ${previous_city}    Set Variable    ${city_names}
    \    ${previous_city_with_dash}    Set Variable    ${city_names_with_dash}
    \    ${previous_city_with_slash}    Set Variable    ${city_names_with_slash}
    [Teardown]    Disconnect From Database
    [Return]    ${city_names.upper().strip()}    ${city_names_with_dash.upper().strip()}    ${city_names_with_slash.upper().strip()}

Get Control Text Value
    [Arguments]    ${control_object}    ${window_title}=${title_power_express}
    Wait Until Keyword Succeeds    60    0.5    Verify Control Object Is Visible    ${control_object}    ${window_title}
    Control Focus    ${window_title}    ${EMPTY}    ${control_object}
    ${control_text_object} =    Control Get Text    ${window_title}    ${EMPTY}    ${control_object}
    Set Test Variable    ${control_text_object}
    [Return]    ${control_text_object}

Get Future Dates For LCC Remarks
    [Arguments]    ${number_of_months}
    ${departure_date}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}
    ${departure_date1}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    5
    ${departure_date2}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    10
    ${departure_date3}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    15
    ${departure_date4}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    20
    ${next_day_departure_date}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    1
    Set Test Variable    ${departure_date}
    Set Test Variable    ${departure_date1}
    Set Test Variable    ${departure_date2}
    Set Test Variable    ${departure_date3}
    Set Test Variable    ${departure_date4}
    Set Test Variable    ${next_day_departure_date}

Get Log File
    [Arguments]    ${file_name}
    ${file_path}    Determine Log File Name and Path    ${file_name}
    ${log_file}    OperatingSystem.Get File    ${file_path}
    [Return]    ${log_file}

Get Month Name
    [Arguments]    ${month_number}
    ${month_number}    Convert to Integer    ${month_number}
    ${months_list}    Create List    JAN    FEB    MAR    APR    MAY
    ...    JUN    JUL    AUG    SEP    OCT    NOV
    ...    DEC
    ${month_number}    Evaluate    ${month_number}-1
    ${month_name}    Get From List    ${months_list}    ${month_number}
    Set Test Variable    ${month_name}
    [Return]    ${month_name}

Get Radio Button Status
    [Arguments]    ${radio_button_control_id}
    ${is_selected}    Get Radio Button State    ${radio_button_control_id}
    [Return]    ${is_selected}

Get Radio Button Status Using Label
    [Arguments]    ${radio_button_label}
    ${is_selected}    Get Radio Button State Using Label    ${radio_button_label}
    [Return]    ${is_selected}

Get String Between Strings
    [Arguments]    ${whole_string}    ${start_string}    ${last_string}
    ${start_string} =    Decode Bytes To String    ${start_string}    UTF-8
    ${last_string} =    Decode Bytes To String    ${last_string}    UTF-8
    ${start_string_exist}    Run Keyword and Return Status    Should Contain    ${whole_string}    ${start_string}
    Run keyword If    "${start_string_exist}" == "False"    Run Keyword and Continue On Failure    FAIL    ${start_string} NOT FOUND
    ${string_array} =    Split String    ${whole_string}    ${start_string}    1
    ${last_string_exist}    Run Keyword and Return Status    Should Contain    ${string_array[1]}    ${last_string}
    Run keyword If    "${last_string_exist}" == "False"    Run Keyword and Continue On Failure    FAIL    ${last_string} NOT FOUND
    ${string_array1} =    Split String    ${string_array[1]}    ${last_string}    1
    [Return]    ${string_array1[0]}

Get Weekday Name
    [Arguments]    ${year}    ${month}    ${day}
    ${year}    Convert to Integer    ${year}
    ${month}    Convert to Integer    ${month}
    ${day}    Convert to Integer    ${day}
    ${offset} =    Create List    0    31    59    90    120
    ...    151    181    212    243    273    304
    ...    334
    ${days_in_week} =    Create List    SUN    MON    TUE    WED    THU
    ...    FRI    SAT
    ${after_feb}    Set Variable    1
    ${month>2} =    Evaluate    ${month} > 2
    Run Keyword If    "${month>2}" == "True"    Set Test Variable    ${after_feb}    0\
    ${aux} =    Evaluate    ${year} - 1700 - ${after_feb}
    ${day_name}    Set Variable    5
    ${aux_after_feb} =    Evaluate    ${aux} + ${after_feb}
    ${day_name} =    Evaluate    ${day_name} + ${aux_after_feb} * 365
    ${aux_100} =    Evaluate    ${aux} + 100
    ${day_name} =    Evaluate    ${day_name} + ${aux} / 4 - ${aux} / 100 + ${aux_100} / 400
    ${month1} =    Evaluate    ${month} - 1
    ${day_name} =    Evaluate    ${day_name} + ${offset[${month1}]} + (${day} - 1)
    ${day_name} =    Evaluate    ${day_name} % 7
    Set Test Variable    ${day_name}    ${days_in_week[${day_name}]}
    [Return]    ${day_name}

Handle Generic Window Popup
    [Arguments]    ${error_message}=${EMPTY}
    ${active_window} =    Win Get Title    [ACTIVE]    ${EMPTY}
    Run Keyword Unless    "${active_window}" != "New Contact..."    Handle New Contact Popup
    ${is_popup_text_message_present} =    Control Command    ${active_window}    ${EMPTY}    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    Set Log Level    INFO
    ${popup_error_msg}    Run Keyword If    '${is_popup_text_message_present}' == '1' and '${error_message}' != '${EMPTY}'    Control Get Text    ${active_window}    ${EMPTY}    [NAME:txtMessageTextBox]
    ${is_displayed}    Run Keyword If    '${is_popup_text_message_present}' == '1' and '${error_message}' != '${EMPTY}'    Run Keyword And Return Status    Should Contain    ${popup_error_msg}    ${error_message}
    Run Keyword If    ${is_displayed} == True    Set Test Variable    ${retry_popup_status}    True
    Set Log Level    NONE
    ${is_popup_clear_message_present} =    Control Command    ${active_window}    ${EMPTY}    [NAME:ClearAllMessage]    IsVisible    ${EMPTY}
    ${is_no_endpoint_listening} =    Control Command    ${active_window}    There was no endpoint listening    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_no_endpoint_listening} == 0    Fatal Error    There was no endpoint listening at https://itest2distribution.cwtwebservices.com/TravelerGDSLookUp.serviceagent/TravelerGDSLookUpEndpoint that could accept the message. This is often caused by an incorrect address or SOAP action. See InnerException, if present, for more details.
    ${is_portrait_down} =    Control Command    ${active_window}    The request channel timed out    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_portrait_down} == 0    Fatal Error    Der Portrait Lookup Service arbeitet derzeit nicht. Bitte identifizieren Sie bis auf weiteres den Reisenden über das GDS. The request channel timed out while waiting for a reply after 00:00:59.8389839. Increase the timeout value passed to the call to Request or increase the SendTimeout value on the Binding. The time allotted to this operation may have been a portion of a longer timeout.
    ${is_portrait_search_unavailable} =    Control Command    Power Express    The Portrait Web Service is unavailable. Please identify the traveler via the GDS search box provided until it is working again. \ Portrait Search Disabled    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    Run Keyword Unless    ${is_portrait_search_unavailable} == 0    Fatal Error    The Portrait Web Service is unavailable. Please identify the traveler via the GDS search box provided until it is working again.
    ${is_cant_complete_pnr} =    Control Command    Power Express    Express ne peut pas terminer le PNR.    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    ${is_power_express_popup_text_message_present} =    Control Command    [CLASS:WindowsForms10.Window.8.app.0.bce5ad_r17_ad1]    ${EMPTY}    [NAME:txtMessageTextBox]    IsVisible    ${EMPTY}
    ${is_message_from_webpage_present}    Control Command    Message from webpage    ${EMPTY}    ${EMPTY}    IsVisible    ${EMPTY}
    Run Keyword If    ${is_message_from_webpage_present}    Run Keywords    Win Activate    Message from webpage    ${EMPTY}
    ...    AND    Send    {ENTER}
    Run Keyword If    ${is_cant_complete_pnr} == 1    Run Keywords    Win Activate    Power Express    ${EMPTY}
    ...    AND    Confirm Popup Window    Power Express
    Run Keyword If    ${is_power_express_popup_text_message_present} == 1    Confirm Popup Window    [CLASS:WindowsForms10.Window.8.app.0.bce5ad_r17_ad1]
    Run Keyword If    ${is_popup_text_message_present} == 1 or ${is_popup_clear_message_present} == 1    Confirm Popup Window    ${active_window}
    Set Log Level    INFO

Handle Incomplete Contacts
    ${user_incomplete_contacts} =    Win Exists    ${title_incomplete_contacts}    ${EMPTY}
    Run Keyword If    "${user_incomplete_contacts}" == "1"    Control Click    ${title_incomplete_contacts}    ${EMPTY}    ${btn_incomplete_contacts}

Handle New Contact Popup
    Win Activate    New Contact...    ${EMPTY}
    Sleep    1
    Control Click    New Contact...    ${EMPTY}    ${explorer_server}    ${EMPTY}    1    774
    ...    215
    Sleep    1
    Send    {PGUP}
    Sleep    1
    Send    ${primaryReason}    1
    Sleep    1
    Control Click    ${title_newContact}    ${EMPTY}    ${explorer_server}    ${EMPTY}    1    727
    ...    350
    Sleep    2
    Send    {HOME}
    Sleep    2
    Send    ${location_counselor}    1
    Send    {TAB}
    Sleep    1
    Control Click    New Contact...    ${EMPTY}    ${explorer_server}    ${EMPTY}    1    733
    ...    525
    Sleep    3
    ${timeout_exists} =    Win Exists    New Contact...    ${EMPTY}
    Run Keyword If    "${timeout_exists}" == "1"    WinClose    ${title_newContact}    ${EMPTY}

Object Not Exists
    [Arguments]    ${imgFile}    ${similarity}    ${timeOut}
    ${is_object_not_exists}    Run Keyword And Return Status    Object Exists    ${sikuli_image_path}/${imgFile}    ${similarity}    ${timeOut}
    Run Keyword If    "${is_object_not_exists}" == "False"    Log    Object Is Not Displayed.
    ...    ELSE    FAIL    Object Is Displayed.
    [Teardown]    Take Screenshot

Remove All Integer
    [Arguments]    ${whole_string}
    Comment    Set Test Variable    ${whole_integer}    ${EMPTY}
    Comment    ${integers}    Create List    1    2    3    4
    ...    5    6    7    8    9    0
    ...    .
    Comment    @{characters} =    Split String To Characters    ${whole_string}
    Comment    : FOR    ${char}    IN    @{characters}
    Comment    \    ${integer} =    Count Values In List    ${integers}    ${char}
    Comment    \    Run keyword If    "${integer}" == "1"    Set Test Variable    ${whole_integer}    ${EMPTY}
    Comment    \    Run keyword If    "${whole_integer}" == "" and "${integer}" == "1"    Set Test Variable    ${whole_integer}    ${whole_integer}
    Comment    \    Run Keyword If    "${integer}" == "0"    Set Test Variable    ${whole_integer}    ${whole_integer}${char}
    ${whole_string}    Replace String Using Regexp    ${whole_string}    \\d    ${EMPTY}
    [Return]    ${whole_string.strip()}

Remove All Non-Integer (retain period)
    [Arguments]    ${whole_string}
    ${whole_integer}    Replace String Using Regexp    ${whole_string}    [^\\d.]+    ${EMPTY}
    Set Test Variable    ${whole_integer}
    [Return]    ${whole_integer.strip()}

Remove Blank Lines And Output To List
    [Arguments]    ${string_to_parse}
    @{lines}    Split to lines    ${string_to_parse}
    ${parse_list}    Create List
    : FOR    ${line}    IN    @{lines}
    \    ${int_Len} =    Get Length    ${line}
    \    ${int_count} =    Get Count    ${line}    ${SPACE}
    \    Run Keyword If    ${int_Len} <> 0 and ${int_count} <> ${int_Len}    Append To List    ${parse_list}    ${line}
    [Return]    ${parse_list}

Remove Decimals
    [Arguments]    ${string_with_decimals}
    ${string_without_decimals}    Fetch From Left    ${string_with_decimals}    .
    [Return]    ${string_without_decimals}

Remove First Character
    [Arguments]    ${whole_string}
    ${whole_string}    Get Substring    ${whole_string}    1
    Set Test Variable    ${whole_string}

Remove Line Number
    [Arguments]    ${string_with_line_number}
    ${pattern}    Set Variable If    "${gds_switch}" == "amadeus"    ((^\\d+\\s)|(\\n\d+\\s))    "${gds_switch}" == "galileo"    \\d+.?\\s
    ${string_without_line_number}    Remove String Using Regexp    ${string_with_line_number}    ${pattern}
    [Return]    ${string_without_line_number}

Replace Decimal Sign
    [Arguments]    ${amount}    ${old_decimal_sign}    ${new_decimal_sign}    ${custom_amount_variable_name}=custom_amount
    ${custom_amount}    Replace String    ${amount}    ${old_decimal_sign}    ${new_decimal_sign}
    Set Test Variable    ${${custom_amount_variable_name}}    ${custom_amount}
    [Return]    ${custom_amount}

Send Control Text Value
    [Arguments]    ${control_object}    ${data_input}    ${window_title}=${title_power_express}
    Wait Until Keyword Succeeds    60    0.5    Verify Control Object Is Visible    ${control_object}    ${window_title}
    Control Set Text    ${window_title}    ${EMPTY}    ${control_object}    ${EMPTY}
    Control Click    ${window_title}    ${EMPTY}    ${control_object}
    Send    ${data_input}

Set Control Text Value
    [Arguments]    ${control_object}    ${data_input}    ${window_title}=${title_power_express}
    Comment    Set Log Level    NONE
    Wait Until Keyword Succeeds    120    1    Verify Control Object Is Visible    ${control_object}    ${window_title}
    Control Click    ${window_title}    ${EMPTY}    ${control_object}
    Control Set Text    ${window_title}    ${EMPTY}    ${control_object}    ${data_input}
    Comment    Set Log Level    INFO

Take Screenshot
    Take A Screenshot

Tick Checkbox
    [Arguments]    ${obj_chkbox}    ${checkbox_method}=${EMPTY}
    ${chkbox_exists}    Control Command    ${title_power_express}    ${EMPTY}    ${obj_chkbox}    isVisible    ${EMPTY}
    ${is_checked} =    Run Keyword If    ${chkbox_exists} == 1    Get Checkbox Status    ${obj_chkbox}
    Run Keyword If    ${chkbox_exists} == 1 and "${is_checked}" == "False" and "${checkbox_method}"=="${EMPTY}"    Click Control Button    ${obj_chkbox}    ${title_power_express}
    ...    ELSE    Run Keywords    Control Focus    ${title_power_express}    ${EMPTY}    ${obj_chkbox}
    ...    AND    Send    ${SPACE}
    [Teardown]    Take Screenshot

Tick Checkbox Via Coordinates
    [Arguments]    ${obj_chkbox}
    ${is_checked} =    Get Checkbox Status    ${obj_chkbox}    true
    ${pos_x} =    Control Get Pos X    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_y} =    Control Get Pos Y    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    Run Keyword If    "${is_checked}" == "False"    Mouse Click    LEFT    ${pos_x+15}    ${pos_y+35}
    [Teardown]    Take Screenshot

Tick Checkbox Via Description
    [Arguments]    ${checkbox_description}    ${ctrl_index}=0
    [Documentation]    Use Checkbox text or description
    ...
    ...    e.g.
    ...    | Tick Checbox Via Desciption | Awaiting Approval | ${ctrl_index}=1 |
    Win Activate    ${title_power_express}    ${EMPTY}
    Tick Checkbox Via Text    ${checkbox_description}    ${ctrl_index}
    [Teardown]

Untick Checkbox
    [Arguments]    ${obj_chkbox}
    ${chkbox_exists}    Control Command    ${title_power_express}    ${EMPTY}    ${obj_chkbox}    isVisible    ${EMPTY}
    ${is_checked} =    Run Keyword If    ${chkbox_exists} == 1    Get Checkbox Status    ${obj_chkbox}
    Run Keyword If    ${chkbox_exists} == 1 and "${is_checked}" == "True"    Click Control Button    ${obj_chkbox}    ${title_power_express}
    [Teardown]    Take Screenshot

Untick Checkbox Via Description
    [Arguments]    ${checkbox_description}    ${ctrl_index}=0
    [Documentation]    Use Checkbox text or description
    ...
    ...    e.g.
    ...    | Untick Checbox Via Desciption | Awaiting Approval | ${ctrl_index}=1 |
    Win Activate    ${title_power_express}    ${EMPTY}
    Untick Checkbox Via Text    ${checkbox_description}    ${ctrl_index}
    [Teardown]

Untick Checkbox via Coordinates
    [Arguments]    ${obj_chkbox}
    ${is_checked} =    Get Checkbox Status    ${obj_chkbox}    true
    ${pos_x} =    Control Get Pos X    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    ${pos_y} =    Control Get Pos Y    ${title_active_window}    ${EMPTY}    ${obj_chkbox}
    Run Keyword If    "${is_checked}" == "True"    Mouse Click    LEFT    ${pos_x+15}    ${pos_y+35}
    [Teardown]    Take Screenshot

Update Amount
    [Arguments]    ${amount_to_be_updated}    ${operator}    ${variance}    ${new_amount_variable_name}=updated_amount
    ${updated_amount}    Evaluate    ${amount_to_be_updated}${operator}${variance}
    ${updated_amount}    Convert To Float    ${updated_amount}
    Set Test Variable    ${${new_amount_variable_name}}    ${updated_amount}

Verify Actual Value Matches Expected Value
    [Arguments]    ${actual_value}    ${expected_value}    ${custom_error}=${EMPTY}
    Log    Actual: ${actual_value}
    Log    Expected: ${expected_value}
    Run Keyword If    '${custom_error}' == '${EMPTY}'    Run Keyword And Continue On Failure    Should Be Equal As Strings    ${actual_value}    ${expected_value}
    Run Keyword If    '${custom_error}' != '${EMPTY}'    Run Keyword And Continue On Failure    Should Be Equal As Strings    ${actual_value}    ${expected_value}    ${custom_error}
    ...    FALSE

Verify Checkbox Is Ticked
    [Arguments]    ${object_name}
    ${checkbox_status}    Get Checkbox Status    ${object_name}
    Run Keyword And Continue On Failure    Should Be True    ${checkbox_status} == True

Verify Checkbox Is Unticked
    [Arguments]    ${object_name}
    ${checkbox_status}    Get Checkbox Status    ${object_name}
    Run Keyword And Continue On Failure    Should Be True    ${checkbox_status} == False    Checkbox status should be unticked
    [Teardown]    Take Screenshot

Verify Control Object Background Color
    [Arguments]    ${object}    ${expected_bgcolor}    ${xadd}=0    ${yadd}=0
    ${actual_bgcolor}    Get Control Object Background Color    ${object}    ${xadd}    ${yadd}
    Run Keyword And Continue On Failure    Should Be True    "${actual_bgcolor}" == "${expected_bgcolor}"    Color does not match ${actual_bgcolor} and ${expected_bgcolor}
    ${is_background_color_equal}    Run Keyword And Return Status    Should Be True    "${actual_bgcolor}" == "${expected_bgcolor}"
    [Return]    ${is_background_color_equal}

Verify Control Object Field Is Mandatory
    [Arguments]    ${object_name}
    Verify Control Object Background Color    ${object_name}    FFD700

Verify Control Object Is Disabled
    [Arguments]    ${obj_name}    ${field_name}=${EMPTY}
    ${is_enabled} =    Control Command    ${title_power_express}    ${EMPTY}    ${obj_name}    IsEnabled    ${EMPTY}
    Should Be True    ${is_enabled} == 0    ${obj_name} - ${field_name} should be disabled
    [Teardown]    Take Screenshot

Verify Control Object Is Enabled
    [Arguments]    ${obj_name}    ${field_name}=${EMPTY}    ${handle_popups}=True
    ${is_enabled} =    Control Command    ${title_power_express}    ${EMPTY}    ${obj_name}    IsEnabled    ${EMPTY}
    Run Keyword And Continue On Failure    Should Be True    ${is_enabled} == 1    ${obj_name} - ${field_name} should be enabled
    Run Keyword If    '${handle_popups.lower()}' == 'true'    Handle Generic Window Popup
    [Teardown]    Take Screenshot

Verify Control Object Is Not Visible
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}
    Win Activate    ${window_title}    ${EMPTY}
    ${object_visibility} =    Control Command    ${window_title}    ${EMPTY}    ${object_name}    IsVisible    ${EMPTY}
    Run Keyword And Continue On Failure    Should Be True    ${object_visibility} == 0    ${object_name} should not be visible

Verify Control Object Is Visible
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Win Activate    ${window_title}    ${EMPTY}
    ${object_visibility} =    Control Command    ${window_title}    ${EMPTY}    ${object_name}    IsVisible    ${EMPTY}
    Run Keyword And Continue On Failure    Should Be True    ${object_visibility} == 1    ${object_name} should be visible
    Run Keyword If    '${handle_popups.lower()}' == 'true'    Handle Generic Window Popup

Verify Control Object Is Visible Based On Active Tab
    [Arguments]    ${fare_tab}    ${obj_list}    ${default_control_counter}=True
    ${fare_tab_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    @{actual_obj_list}    Split String    ${obj_list}    ,
    @{visible_objects}    Create List
    Win Activate    ${title_power_express}    ${EMPTY}
    : FOR    ${obj_name}    IN    @{actual_obj_list}
    \    ${object_name}    Set Variable If    ${default_control_counter} == True    [NAME:${obj_name}_${fare_tab_index}]    [NAME:${obj_name}]
    \    ${object_visibility} =    Control Command    ${title_power_express}    ${EMPTY}    ${object_name}    IsVisible
    \    ...    ${EMPTY}
    \    Append To List    ${visible_objects}    ${object_visibility}
    \    Exit For Loop If    ${object_visibility} == 1
    List Should Contain Value    ${visible_objects}    1

Verify Control Object Text Value Is Correct
    [Arguments]    ${control_object}    ${expected_text_value}    ${optional_message}=${EMPTY}    ${verification_mode}=${EMPTY}    ${window_title}=${EMPTY}
    ${actual_text_value}    Get Control Text Value    ${control_object}    ${window_title}
    Run Keyword If    '${verification_mode}' == '${EMPTY}'    Run Keyword And Continue On Failure    Should Be Equal As Strings    ${actual_text_value}    ${expected_text_value}    ${optional_message}
    Run Keyword If    '${verification_mode.lower()}' == 'contains'    Run Keyword And Continue On Failure    Should Contain    ${actual_text_value}    ${expected_text_value}    ${optional_message}

Verify Field Is Empty
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}
    Win Activate    ${window_title}    ${EMPTY}
    ${field_value} =    Control Get Text    ${window_title}    ${EMPTY}    ${object_name}
    Run Keyword And Continue On Failure    Should Be True    '${field_value}' == '${EMPTY}'

Verify Image Does Exists
    [Arguments]    ${image_file}
    Log    ${sikuli_image_path}/${image_file}
    ${does_exists}    Does Exist    ${sikuli_image_path}../../sikuli/${image_file}
    Should Be True    ${does_exists} == True
    Sleep    1
    [Teardown]    Take Screenshot

Verify Image Does Not Exists
    [Arguments]    ${image_file}
    ${does_exists}    Does Exist    ${sikuli_image_path}/${image_file}
    Should Be True    ${does_exists} == False
    [Teardown]    Take Screenshot

Verify Multiple Object Name is Visible On Active Tab
    [Arguments]    ${obj_name}    ${obj_num}    ${default_control_counter}=True    ${field_instance}=${EMPTY}
    : FOR    ${actual_obj_list}    IN    @{obj_name}
    \    ${actual_obj_list}    Set Variable    ${actual_obj_list.strip()}
    \    Log    ${actual_obj_list}_${obj_num}
    \    ${object_name}    Set Variable If    ${default_control_counter} == True    [NAME:${actual_obj_list}_${obj_num}]    [NAME:${actual_obj_list}]
    \    ${is_obj_visible}    Control Command    ${title_power_express}    ${EMPTY}    ${object_name}    IsVisible
    \    ...    ${EMPTY}
    \    Run Keyword If    ${is_obj_visible} == 1 and "${field_instance}" == "${EMPTY}"    Exit For Loop
    \    ...    ELSE IF    ${is_obj_visible} == 1 and "${field_instance}" == "${obj_num}"    Exit For Loop
    \    ...    ELSE    Continue For Loop
    [Return]    ${object_name}    ${is_obj_visible}

Verify Text Contains Expected Value
    [Arguments]    ${text}    ${expected_value}    ${reg_exp_flag}=false    ${multi_line_search_flag}=false
    Log    Expected: ${expected_value}
    Log    Actual: ${text}
    ${line_containing_expected_value} =    Get Lines Containing String    ${text}    ${expected_value}
    Set Test Variable    ${line_containing_expected_value}
    Run Keyword And Continue On Failure    Run Keyword If    "${reg_exp_flag.lower()}" == "false"    Should Contain    ${text}    ${expected_value}    "${expected_value}" is not found.
    ...    FALSE
    Run Keyword And Continue On Failure    Run Keyword If    "${reg_exp_flag.lower()}" == "true"    Should Match RegExp    ${text}    ${expected_value}    "${expected_value}" is not found.
    ...    FALSE
    ${flattened_text}    Run Keyword If    "${multi_line_search_flag.lower()}" == "true"    Flatten String    ${text}
    Run Keyword If    "${multi_line_search_flag.lower()}" != "false"    Log    ${flattened_text}
    Run Keyword And Continue On Failure    Run Keyword If    "${multi_line_search_flag.lower()}" == "true"    Should Contain    ${flattened_text}    ${expected_value}    "${expected_value}" is not found.
    ...    FALSE

Verify Text Contains Expected Value X Times Only
    [Arguments]    ${text}    ${expected_value}    ${occurence}
    Log    Expected: ${expected_value} is displayed ${occurence} time/s only
    Run Keyword And Continue On Failure    Should Contain X Times    ${text}    ${expected_value}    ${occurence}    "${expected_value}" did not occured ${occurence} time(s).
    Log    Actual: ${expected_value} was displayed ${occurence} time/s

Verify Text Does Not Contain Value
    [Arguments]    ${text}    ${expected_value}    ${reg_exp_flag}=false
    Log    Expected: ${expected_value}
    Log    Actual: ${text}
    ${line_containing_expected_value} =    Get Lines Containing String    ${text}    ${expected_value}
    Set Test Variable    ${line_containing_expected_value}
    Run Keyword And Continue On Failure    Run Keyword If    "${reg_exp_flag.lower()}" == "false"    Should Not Contain    ${text}    ${expected_value}    "${expected_value}" is found.
    ...    FALSE
    Run Keyword And Continue On Failure    Run Keyword If    "${reg_exp_flag.lower()}" == "true"    Should Not Match RegExp    ${text}    ${expected_value}    "${expected_value}" is found.
    ...    FALSE

Verify Whole String Contains Substring
    [Arguments]    ${whole_string}    ${sub_string}
    ${whole_string} =    Convert To String    ${whole_string}
    ${is_substring_found} =    Call Method    ${whole_string}    find    ${sub_string}
    Should Be True    ${is_substring_found} >= 0

Verify Window Does Not Exists
    [Arguments]    ${window_title}    ${window_text}=${EMPTY}
    ${does_window_exists} =    Win Exists    ${window_title}    ${window_text}
    Should Be True    ${does_window_exists} == 0

Verify Window Exists
    [Arguments]    ${window_title}
    ${does_window_exists} =    Win Exists    ${window_title}    ${EMPTY}
    Should Be True    ${does_window_exists} == 1

Verify Window Is Active
    [Arguments]    ${window_title}
    ${is_window_active} =    Win Active    ${window_title}    ${EMPTY}
    Should Be True    ${is_window_active} == 1

Wait Until Control Checkbox Is Ticked
    [Arguments]    ${checkbox_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Wait Until Keyword Succeeds    60    2    Verify Checkbox Is Ticked    ${checkbox_name}

Wait Until Control Object Is Disabled
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Wait Until Keyword Succeeds    60    1    Verify Control Object Is Disabled    ${object_name}    ${window_title}

Wait Until Control Object Is Enabled
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Wait Until Keyword Succeeds    60    2    Verify Control Object Is Enabled    ${object_name}    ${window_title}    ${handle_popups}

Wait Until Control Object Is Not Visible
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Wait Until Keyword Succeeds    60    2    Verify Control Object Is Not Visible    ${object_name}    ${window_title}

Wait Until Control Object Is Visible
    [Arguments]    ${object_name}    ${window_title}=${title_power_express}    ${handle_popups}=false
    Wait Until Keyword Succeeds    60    2    Verify Control Object Is Visible    ${object_name}    ${window_title}    ${handle_popups}

Wait Until Image Does Exists
    [Arguments]    ${image_file}    ${max_retry}=30    ${retry_interval}=1
    Wait Until Keyword Succeeds    ${max_retry}    ${retry_interval}    Verify Image Does Exists    ${image_file}

Wait Until Image Does Not Exists
    [Arguments]    ${image_file}    ${max_retry}=30    ${retry_interval}=1
    Wait Until Keyword Succeeds    ${max_retry}    ${retry_interval}    Verify Image Does Not Exists    ${image_file}

Wait Until Window Does Not Exists
    [Arguments]    ${window_title}    ${timeout}=60    ${retry_interval}=3    ${window_text}=${EMPTY}
    Set Log Level    NONE
    Wait Until Keyword Succeeds    ${timeout}    ${retry_interval}    Verify Window Does Not Exists    ${window_title}    ${window_text}
    Set Log Level    INFO

Wait Until Window Exists
    [Arguments]    ${window_title}    ${timeout}=60    ${retry_interval}=3
    Set Log Level    NONE
    Wait Until Keyword Succeeds    ${timeout}    ${retry_interval}    Verify Window Exists    ${window_title}
    Set Log Level    INFO
    [Teardown]    Take Screenshot

Wait Until Window Is Active
    [Arguments]    ${window_title}    ${timeout}=60    ${retry_interval}=3
    Set Log Level    NONE
    Wait Until Keyword Succeeds    ${timeout}    ${retry_interval}    Verify Window Is Active    ${window_title}
    Set Log Level    INFO

Verify Control Object Field Is Not Mandatory
    [Arguments]    ${object_name}
    Verify Control Object Background Color    ${object_name}    FFFFFF

Verify Tooltip Text Is Correct
    [Arguments]    ${control_id}    ${tooltip_text}
    [Documentation]    For ${control_id} use value of ClassnameNN instead of Advanced (Class)
    ...    e.g.
    ...
    ...    Use:
    ...    WindowsForms10.MDICLIENT.app.0.194e1a4_r17_ad11
    ...
    ...    instead of:
    ...    [CLASS:WindowsForms10.MDICLIENT.app.0.194e1a4_r17_ad1; INSTANCE:1]
    ${xpos}    ${ypos}    Get Control Object Coordinates    ${control_id}
    ${actual_tooltip_text}    Get Tooltip Text    ${xpos}    ${ypos}
    Should Be Equal    ${tooltip_text}    ${actual_tooltip_text}    Expected tooltip "${tooltip_text}" should be equal to actual tooltip "${actual_tooltip_text}"    False
    [Teardown]    Take Screenshot

Get Control Object Coordinates
    [Arguments]    ${control_id}
    ${xpos} =    Control Get Pos X    ${title_power_express}    ${EMPTY}    ${control_id}
    ${ypos} =    Control Get Pos Y    ${title_power_express}    ${EMPTY}    ${control_id}
    ${hpos} =    Control Get Pos Height    ${title_power_express}    ${EMPTY}    ${control_id}
    ${wpos} =    Control Get Pos Width    ${title_power_express}    ${EMPTY}    ${control_id}
    ${wpos} =    Evaluate    ${wpos} / 2
    ${hpos} =    Evaluate    ${hpos} / 2
    ${xpos} =    Evaluate    ${xpos} + ${wpos}
    ${ypos} =    Evaluate    ${ypos} + ${hpos}
    [Return]    ${xpos}    ${ypos}

Get Control Object Background Color
    [Arguments]    ${object}    ${xadd}=0    ${yadd}=0
    ${x}    Control Get Pos X    ${title_power_express}    ${EMPTY}    ${object}
    ${width}    Control Get Pos Width    ${title_power_express}    ${EMPTY}    ${object}
    ${width}    Evaluate    ${width}/2
    ${x}    Evaluate    ${x}+${width}+${xadd}
    ${y}    Control Get Pos Y    ${title_power_express}    ${EMPTY}    ${object}
    ${height}    Control Get Pos Height    ${title_power_express}    ${EMPTY}    ${object}
    ${height}    Evaluate    ${height}/2
    ${y}    Evaluate    ${y}+${height}+${yadd}
    Auto It Set Option    PixelCoordMode    2
    ${actual_bgcolor}    Pixel Get Color    ${x}    ${y}
    Auto It Set Option    PixelCoordMode    0
    ${actual_bgcolor}    Convert To Hex    ${actual_bgcolor}
    [Return]    ${actual_bgcolor}
