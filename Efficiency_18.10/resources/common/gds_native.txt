*** Settings ***
Resource          global_resources.txt

*** Variables ***
${sikuli_image_path}    ${CURDIR}/../sikuli

*** Keywords ***
Activate GDS Native
    Run Keyword If    '${GDS_switch}' == 'amadeus'    Activate Amadeus Selling Platform
    ...    ELSE IF    '${GDS_switch}' == 'galileo' or '${GDS_switch}' == 'apollo'    Activate Travelport Window
    ...    ELSE IF    '${GDS_switch}' == 'sabre'    Activate Sabre Red Workspace

Activate Sabre Red Workspace
    Win Activate    Sabre® Red™ Workspace - Sabre Travel Network    ${EMPTY}
    Control Focus    Sabre® Red™ Workspace - Sabre Travel Network    ${EMPTY}    ${EMPTY}
    Set Test Variable    ${gds_switch}    sabre

Activate Travelport Window
    Win Activate    ${title_galileo_desktop}    ${EMPTY}
    Sleep    4
    ${booking_updated_popup_exists} =    Win Exists    ${title_booking_updated}    ${EMPTY}
    ${pnr_updated_popup_exists} =    Win Exists    ${title_pnr_was_updated}    ${EMPTY}
    Run Keyword If    ${booking_updated_popup_exists} == 1    Run Keywords    Control Click    ${title_booking_updated}    ${EMPTY}    ${btn_OK_booking_updated}
    ...    AND    Sleep    3
    ...    ELSE IF    ${pnr_updated_popup_exists} == 1    Run Keywords    Control Click    ${title_pnr_was_updated}    ${EMPTY}
    ...    ${btn_pnr_was_updated}
    ...    AND    SLEEP    3
    Run Keyword If    "${test_environment}" == "sit_stable"    Win Activate    Travelport Smartpoint App - Window 1    ${EMPTY}
    ...    ELSE    Win Activate    ${title_smartpoint}    ${EMPTY}
    Activate Travelport Terminal Window
    Send    ^w
    Sleep    2

Add KDS Remarks
    [Arguments]    ${kds_remarks}
    Activate Travelport Window
    : FOR    ${INDEX}    IN RANGE    10
    \    Send    I{ENTER}
    \    Sleep    2
    \    Send    *${current_pnr}{ENTER}
    \    Sleep    2
    \    Send    ${kds_remarks}{ENTER}
    \    Sleep    2
    \    Send    R.CWTPTEST{ENTER}
    \    Sleep    2
    \    Send    ER{ENTER}
    \    Sleep    2
    \    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain    ${data_clipboard}    SIMULT
    \    Exit For Loop If    ${is_simultaneous_exist} == False
    Send    I{ENTER}
    [Teardown]    Take Screenshot

Cancel Apollo PNR
    [Arguments]    ${current_pnr}
    Activate Travelport Window
    Log    ${current_pnr}
    : FOR    ${INDEX}    IN RANGE    10
    \    Send    I{ENTER}
    \    Sleep    2
    \    Send    *${current_pnr}{ENTER}
    \    Sleep    2
    \    Send    XT{ENTER}
    \    Sleep    2
    \    Send    XI{ENTER}
    \    Sleep    2
    \    Send    R:CWTPTEST{ENTER}
    \    Sleep    2
    \    Send    ER{ENTER}
    \    Sleep    3
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain    ${data_clipboard}    SIMULTANEOUS
    \    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_simultaneous_exist2}    Run Keyword And Return Status    Should Contain    ${data_clipboard}    SIMULTANEOUS
    \    Exit For Loop If    ${is_simultaneous_exist} == False or ${is_simultaneous_exist2} == False
    Send    *I{ENTER}
    Sleep    3
    ${data_clipboard}    Get Clipboard Data Travelport
    Run Keyword And Continue On Failure    Should Contain    ${data_clipboard.upper()}    NO ITIN
    Send    I{ENTER}
    Sleep    2

Cancel Galileo PNR
    [Arguments]    ${current_pnr}    ${emulate_back_to_home_pcc}=False    ${extra_command}=NO    ${void_ticket}=False
    Log    ${current_pnr}
    Run Keyword If    "${void_ticket}" == "True"    Void Ticket Number For Galileo    ${current_pnr}
    Activate Travelport Window
    : FOR    ${INDEX}    IN RANGE    20
    \    Send    {CTRLDOWN}S{CTRLUP}
    \    Sleep    2
    \    Send    I{ENTER}
    \    Sleep    2
    \    Send    *${current_pnr}{ENTER}
    \    Run Keyword If    "${extra_command.upper()}" != "NO"    Run Keywords    Send    ${extra_command}{ENTER}
    \    ...    AND    Sleep    2
    \    Sleep    2
    \    Send    FXALL{ENTER}
    \    Sleep    2
    \    Send    XI{ENTER}
    \    Sleep    2
    \    Send    NP.THIS IS A TEST PNR{ENTER}
    \    Sleep    2
    \    Send    R.CWTPTEST{ENTER}
    \    Sleep    2
    \    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain    ${data_clipboard.upper()}    SIMULTANEOUS
    \    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_simultaneous_exist2}    Run Keyword And Return Status    Should Contain    ${data_clipboard.upper()}    SIMULTANEOUS
    \    Exit For Loop If    ${is_simultaneous_exist} == False or ${is_simultaneous_exist2} == False
    Send    ^w
    Sleep    2
    Send    *I{ENTER}
    Sleep    2
    ${data_clipboard}    Get Clipboard Data Travelport
    Run Keyword And Continue On Failure    Should Contain    ${data_clipboard.upper()}    NO ITINERARY
    Send    I{ENTER}
    Sleep    2
    Run Keyword If    "${emulate_back_to_home_pcc}" == "True"    Run Keywords    Send    SEM/46T/AG{ENTER}
    ...    AND    Sleep    2

Cancel Galileo PNR Via Power Express
    [Arguments]    ${current_pnr}    ${emulate_back_to_home_pcc}=False    ${extra_command}=NO    ${void_ticket}=False
    Log    ${current_pnr}
    Run Keyword If    "${void_ticket}" == "True"    Void Ticket Number For Galileo    ${current_pnr}
    Click GDS Screen Tab
    :FOR    ${INDEX}    IN RANGE    20
    \    Enter GDS Command    I    *${current_pnr}    FXALL    XI    NP. THIS IS A TEST PNR
    \    ...    R.CWTPTEST    ER
    \    ${screen_data}=    Get Data From GDS Screen    \    True
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain Any    ${screen_data}    SIMULTANEOUS
    \    Enter GDS Command    ER
    \    ${screen_data}=    Get Data From GDS Screen    \    True
    \    ${is_simultaneous_exist2}    Run Keyword And Return Status    Should Contain Any    ${screen_data}    SIMULTANEOUS
    \    Exit For Loop If    ${is_simultaneous_exist} == False or ${is_simultaneous_exist2} == False
    Sleep    2
    Enter GDS Command    I
    Sleep    2
    Run Keyword If    "${emulate_back_to_home_pcc}" == "True"    Run Keywords    Enter GDS Command    SEM/46T/AG
    ...    AND    Sleep    2

Cancel PNR Thru GDS Native
    [Arguments]    ${current_pnr}    ${emulate_back_to_home_pcc}=True    ${cancel_resa_rail}=False    ${extra_command}=NO    ${number_of_xe2}=0    ${void_ticket}=False
    ...    ${click_clear_all}=True
    Should Be True    "${current_pnr}" != "${EMPTY}"    Cannot cancel booking due to no PNR record locator
    Run Keyword If    '${GDS_switch.lower()}' == 'amadeus' and "${current_pnr}" != "${EMPTY}"    Cancel Amadeus PNR    ${current_pnr}    ${emulate_back_to_home_pcc}    ${cancel_resa_rail}    ${number_of_xe2}
    ...    void_ticket=${void_ticket}
    Run Keyword If    '${GDS_switch.lower()}' == 'sabre' and "${current_pnr}" != "${EMPTY}"    Cancel Sabre PNR    ${current_pnr}
    Run Keyword If    '${GDS_switch.lower()}' == 'galileo' and "${current_pnr}" != "${EMPTY}"    Cancel Galileo PNR Via Power Express    ${current_pnr}    ${emulate_back_to_home_pcc}    ${extra_command}    ${void_ticket}
    Run Keyword If    '${GDS_switch.lower()}' == 'apollo' and "${current_pnr}" != "${EMPTY}"    Cancel Apollo PNR    ${current_pnr}
    Run Keyword If    '${click_clear_all}' == 'True'    Click Clear All
    [Teardown]

Cancel Sabre PNR
    [Arguments]    ${current_pnr}
    Activate Power Express Window
    Click GDS Screen Tab
    Clear Data From Clipboard
    : FOR    ${INDEX}    IN RANGE    20
    \    Enter GDS Command    I{ENTER}    *${current_pnr}{ENTER}
    \    Enter GDS Command    PQD-ALL{ENTER}    XI{ENTER}    6CWTPTEST{ENTER}
    \    ${data_clipboard}    Get Data From GDS Screen    ER{ENTER}
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Not Contain    ${data_clipboard}    SIMULTANEOUS
    \    Exit For Loop If    ${is_simultaneous_exist} == True
    Enter GDS Command    ER{ENTER}    I{ENTER}    *${current_pnr}{ENTER}
    ${data_clipboard}    Get Data From GDS Screen    *I{ENTER}
    Run Keyword And Continue On Failure    Should Contain    ${data_clipboard}    NO ITIN

Change Itinerary Flight Date
    [Arguments]    ${segment_number}    ${number_of_months}    ${number_of_days}    ${end_retrieve_flag}=True
    ${new_date}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    ${number_of_days}
    ${base_date}    Evaluate    ${number_of_days}-1
    ${ticketing_date}    Set Departure Date X Months From Now In Gds Format    ${number_of_months}    ${base_date}
    : FOR    ${INDEX}    IN RANGE    21
    \    Run Keyword If    '${gds_switch}'=='galileo' and ${end_retrieve_flag}==False    Enter Specific Command On Native GDS    @${segment_number}/${new_date}    FQ    T.TAU/${ticketing_date}
    \    Run Keyword If    '${gds_switch}'=='galileo' and ${end_retrieve_flag}==True    Run Keywords    Enter Specific Command On Native GDS    @${segment_number}/${new_date}    FQ
    \    ...    T.TAU/${ticketing_date}
    \    ...    AND    End And Retrieve PNR
    \    Get Clipboard Data
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain    """${data_clipboard.upper()}"""    SIMULTANEOUS
    \    Run Keyword If    ${is_simultaneous_exist} == True    Sleep    5
    \    Exit For Loop If    ${is_simultaneous_exist} == False

Determine If Next Fare Exists
    [Arguments]    ${counter}
    ${next_value}    Evaluate    ${counter} + 1
    ${next_fare_exists}    Run Keyword If    ${counter} == ${number_of_fares}    Set Variable    >
    ...    ELSE    Set Variable    FQ${next_value}
    [Return]    ${next_fare_exists}

Determine If Next Quote Exists
    [Arguments]    ${current_fare_number}
    ${next_value}    Evaluate    ${current_fare_number} + 1
    ${contains}    Run Keyword And Return Status    Should Contain    ${pnr_details}    QUOTE NUMBER: ${next_value}
    ${next_fare_exists}    Run Keyword If    "${contains}" == "False"    Set Variable    >
    ...    ELSE    Set Variable    QUOTE NUMBER: ${next_value}
    [Return]    ${next_fare_exists}

Determine Line Start Value
    ${contains_equ}    Run Keyword And Return Status    Should Contain    ${base_fare_value}    EQU
    ${start_value}    Run Keyword If    "${contains_equ}" == "True"    Set Variable    EQU
    ...    ELSE    Set Variable    FARE
    [Return]    ${start_value}

Determine Received From Text
    ${received_from}    Set Variable If    "${gds_switch}" == "amadeus"    RFTESTPNR    "${gds_switch}" == "sabre"    6TESTPNR    "${gds_switch}" == "apollo"
    ...    R:CWTUSER    "${gds_switch}" == "galileo"    R.CWTUSER
    Set Test Variable    ${received_from}

Edit PNR Remarks
    [Arguments]    ${current_pnr}    ${original_remark}    ${new_remark}    ${galileo_remark_type}=${EMPTY}
    Activate GDS Native
    Determine Received From Text
    ${line_number}    Run Keyword If    "${GDS_switch.lower()}" != "amadeus"    Get Line Number In PNR Remarks    ${original_remark}
    ...    ELSE    Get Line Number In Amadeus PNR Remarks    ${original_remark}
    ${line_number_and_remark}    Set Variable If    "${GDS_switch.lower()}" == "sabre"    5${line_number}${new_remark}    "${GDS_switch.lower()}" == "amadeus"    ${line_number}/${new_remark}    "${GDS_switch.lower()}" == "galileo"
    ...    ${galileo_remark_type}.${line_number}@${new_remark}
    ${ignore_command}    Set Variable If    "${GDS_switch.lower()}" != "amadeus"    I{ENTER}    IG{ENTER}
    ${retrieve_pnr_command}    Set Variable If    "${GDS_switch.lower()}" != "amadeus"    *${current_pnr}{ENTER}    rt${current_pnr}{ENTER}
    : FOR    ${counter}    IN RANGE    1    10
    \    Run Keyword If    "${GDS_switch.lower()}" == "sabre"    Run Keywords    Send    {CTRLDOWN}{SHIFTDOWN}
    \    ...    AND    Send    {BS}
    \    ...    AND    Send    {CTRLUP}{SHIFTUP}
    \    Send    ${ignore_command}
    \    Sleep    1
    \    Send    ${retrieve_pnr_command}
    \    Sleep    2
    \    Send    ${line_number_and_remark}
    \    Sleep    1
    \    Send    {ENTER}
    \    Sleep    2
    \    Send    ${received_from}{ENTER}
    \    Sleep    2
    \    Send    ER{ENTER}
    \    Sleep    2
    \    Get Clipboard Data
    \    ${is_simultaneous_exist1}    Run Keyword And Return Status    Should Contain    """${data_clipboard.upper()}"""    SIMULTANEOUS
    \    ${is_simultaneous_exist2}    Run Keyword And Return Status    Should Contain    """${data_clipboard.upper()}"""    SIMULTANEOUS CHANGES
    \    Exit For Loop If    "${is_simultaneous_exist1}" == "False" and "${is_simultaneous_exist2}" == "False"
    Send    ER{ENTER}
    Sleep    2
    Send    ${ignore_command}
    Sleep    1

End And Retrieve PNR
    [Arguments]    ${enter_in_native_gds}=True
    ${received_from}    Set Variable If    '${gds_switch}'=='galileo'    R.CWTTEST    '${gds_switch}'=='sabre'    6CWTTEST    '${gds_switch}'=='amadeus'
    ...    RFCWTPTEST    '${gds_switch}'=='apollo'    R:CWTPTEST
    Run Keyword If    ${enter_in_native_gds}==True    Enter Specific Command On Native GDS    ${received_from}    ER    ER
    ...    ELSE    Enter GDS Command    ${received_from}    ER    ER
    ${ignore_cmd}    Set Variable If    '${gds_switch}'=='galileo'    I    '${gds_switch}'=='sabre'    I    '${gds_switch}'=='amadeus'
    ...    IG    '${gds_switch}'=='apollo'    I
    Run Keyword If    ${enter_in_native_gds}==True    Enter Specific Command On Native GDS    ${ignore_cmd}
    ...    ELSE    Enter GDS Command    ${ignore_cmd}

Enter Command In Native GDS
    [Arguments]    @{gds_commands}
    : FOR    ${gds_command}    IN    @{gds_commands}
    \    Run Keyword If    '${gds_switch}' == 'apollo'    Run Keywords    Send    ^w
    \    ...    AND    Sleep    1
    \    Run Keyword If    '${gds_switch}' == 'apollo'    Send    ${gds_command}{ENTER}
    \    ...    ELSE    Enter GDS Command    ${gds_command}
    \    Run Keyword If    '${gds_switch}' == 'apollo'    Wait Until Smartpoint Terminal Is Refreshed
    [Teardown]    Take Screenshot

Enter LCC Remarks For Specific Airline Code
    [Arguments]    ${airline_code}    ${currency}    ${base_fare_amount}    ${tax_1}    ${tax_2}    ${tax_3}
    ...    ${grand_total_amount}    ${ticket_number}    ${cf_code}    ${vendor_code}    ${commission_amount}
    ${write_command}    Set Variable If    "${GDS_switch.upper()}" == "SABRE"    5H-F‡    "${GDS_switch.upper()}" == "APOLLO"    ¤:5H¤F/
    Enter GDS Command    ${write_command}LCC-${airline_code}*BASE FARE ${currency} ${base_fare_amount}
    Enter GDS Command    ${write_command}LCC-${airline_code}*TAX1 C${tax_1}
    Enter GDS Command    ${write_command}LCC-${airline_code}*TAX2 H${tax_2}
    Enter GDS Command    ${write_command}LCC-${airline_code}*TAX3 D${tax_3}
    Enter GDS Command    ${write_command}LCC-${airline_code}*GRAND TOTAL ${currency} ${grand_total_amount}
    Enter GDS Command    ${write_command}LCC-${airline_code}*TK-${ticket_number}
    Enter GDS Command    ${write_command}LCC-${airline_code}*CF-${cf_code}
    Enter GDS Command    ${write_command}LCC-${airline_code}*VN-${vendor_code}
    Enter GDS Command    ${write_command}LCC-${airline_code}*COMM-${commission_amount} ${currency}
    [Teardown]    Take Screenshot

Enter Specific Command On Native GDS
    [Arguments]    @{gds_command}
    Activate GDS Native
    Run Keyword If    '${GDS_switch}' == 'sabre'    Enter Command In Native GDS    @{gds_command}
    Run Keyword If    '${GDS_switch}' == 'amadeus'    Enter Command In Native GDS    @{gds_command}
    Run Keyword If    '${GDS_switch}' == 'apollo'    Enter Command In Native GDS    @{gds_command}
    Run Keyword If    '${GDS_switch}' == 'galileo'    Enter Command In Native GDS    @{gds_command}
    Activate Power Express Window

Force Ignore To GDS
    Activate GDS Native
    ${ignore_command}    Set Variable If    "${GDS_switch.lower()}" != "amadeus"    I{ENTER}    IG{ENTER}
    Send    ${ignore_command}

Get All Data From Smart Panel
    Clear Data From Clipboard
    Run Keyword If    "${test_environment}" == "sit_stable"    Run Keywords    Win Activate    Travelport Smartpoint App - PNR Viewer    ${EMPTY}
    ...    AND    Sleep    1
    ${smart_panel_data} =    Get Travelport Smart Window Details
    ${data_line_count} =    Get Line Count    ${smart_panel_data}
    Run Keyword If    ${data_line_count} < 6    Get All Data From Smart Panel
    Set Test Variable    ${pnr_details}    ${smart_panel_data}
    [Teardown]    Take Screenshot
    [Return]    ${pnr_details}

Get All Data From Terminal Window
    [Arguments]    ${gds_command}    ${wait_time}=2    ${performl_md}=True
    Set Test Variable    ${history}    ${EMPTY}
    Set Test Variable    ${previous_clipboard}    ${EMPTY}
    Send Travelport Command    ${gds_command}
    Take Screenshot
    ${data_clipboard}    Get Clipboard Data Travelport
    : FOR    ${INDEX}    IN RANGE    21
    \    Run Keyword If    """${data_clipboard}""" == """${previous_clipboard}"""    Exit For Loop
    \    ...    ELSE    Set Test Variable    ${previous_clipboard}    ${data_clipboard}
    \    ${history}    Catenate    ${history}    ${previous_clipboard}
    \    Run Keyword If    "${performl_md}" == "True"    Run Keywords    Send    MD{ENTER}
    \    ...    AND    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data Travelport
    \    ${is_command_invalid} =    Run Keyword And Return Status    Should Contain    ${data_clipboard}    INVLD
    \    ${is_command_invalid_2} =    Run Keyword And Return Status    Should Contain    ${data_clipboard}    INVALID
    \    Exit For Loop If    ${is_command_invalid} == True or ${is_command_invalid_2} == True or "${performl_md}" == "False"
    Set Test Variable    ${terminal_window_data}    ${history.strip()}
    [Teardown]    Take Screenshot
    [Return]    ${terminal_window_data}

Get All Data On Blue Window
    [Arguments]    ${gds_command}
    Set Test Variable    ${history}    ${EMPTY}
    Set Test Variable    ${previous_clipboard}    ${EMPTY}
    Clear Data From Clipboard
    Sleep    2
    Send    ${gds_command}{ENTER}
    Sleep    2
    : FOR    ${index}    IN RANGE    0    99
    \    Sleep    0.5
    \    Send    ^a
    \    Sleep    1
    \    Send    ^c
    \    Sleep    1
    \    Send    {DOWN}
    \    Sleep    1
    \    ${data_clipboard}    Get Data From Clipboard
    \    Run Keyword If    """${data_clipboard}""" == """${previous_clipboard}"""    Exit For Loop
    \    ...    ELSE    Set Test Variable    ${previous_clipboard}    ${data_clipboard}
    \    ${is_command_invalid} =    Run Keyword And Return Status    Should Contain    ${data_clipboard}    INVLD
    \    ${is_command_invalid_2} =    Run Keyword And Return Status    Should Contain    ${data_clipboard}    INVALID
    \    Exit For Loop If    ${is_command_invalid} == True or ${is_command_invalid_2} == True
    \    Send    {END}
    \    Sleep    1
    \    Send    MD{ENTER}
    \    Sleep    0.5
    \    ${history}    Catenate    ${history}    ${previous_clipboard}
    Set Test Variable    ${blue_window_data}    ${history.strip()}
    [Return]    ${blue_window_data}

Get All Data On Gray Window
    Clear Data From Clipboard
    Sleep    1
    Click Object    ${sikuli_image_path}/smartpoint_ALL.png    ${similarity}    ${timeout}
    Sleep    3
    Control Click    ${path_galileo_desktop}    ${EMPTY}    ${galileo_text_control}
    Click Object    ${sikuli_image_path}/identify.png    ${similarity}    ${timeout}
    Sleep    1
    Send    {CTRLDOWN}ac{CTRLUP}
    Sleep    1
    ${gray_winbdow_data} =    Get Data From Clipboard
    [Return]    ${gray_winbdow_data}

Get Base Fare And Tax From Galileo For Fare X Tab
    [Arguments]    ${fare_tab}
    ${number_of_fares}    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${number_of_fares}
    ${subset}    Get String Between Strings    ${pnr_details}    FQ${number_of_fares}    /S${number_of_fares}
    ${base_fare_value}    Get Lines Containing String    ${subset}    FARE
    Set Test Variable    ${base_fare_value}
    ${line_to_start_from}    Determine Line Start Value
    ${base_fare_value}    Fetch From Right    ${base_fare_value}    ${line_to_start_from}
    ${base_fare_value}    Fetch From Left    ${base_fare_value}    TAX
    ${base_fare_value}    Remove Leading And Ending Spaces    ${base_fare_value}
    ${currency}    Get Substring    ${base_fare_value}    0    3
    ${base_fare_value}    Remove All Non-Integer (retain period)    ${base_fare_value}
    Set Test Variable    ${base_fare_value_${number_of_fares}}    ${base_fare_value}
    ${total_fare}    Get Lines Matching Regexp    ${subset}    .*ADT\ \ .*
    ${total_fare}    Fetch From Right    ${total_fare}    ${currency}
    ${total_fare}    Remove All Non-Integer (retain period)    ${total_fare}
    ${total_tax}    Evaluate    ${total_fare} - ${base_fare_value_${number_of_fares}}
    ${country_code}    Get Country Code Based On Currency    ${currency}
    ${gst_identifier}    Set Variable If    "${country_code.upper()}" == "NZ"    NZ    "${country_code.upper()}" == "AU"    UO    "${country_code.upper()}" == "MY"
    ...    D8
    ${gst_amount}    Get String Matching Regexp    TAX [0-9]+\.[0-9][0-9]${gst_identifier}    ${subset}
    ${gst_amount}    Run Keyword If    "${gst_amount}" != "0"    Remove All Non-Integer (retain period)    ${gst_amount}
    ...    ELSE    Set Variable    ${gst_amount}
    ${gst_amount}    Set Variable If    "${gst_amount}" != "."    ${gst_amount}    0
    ${total_tax_less_gst}    Run Keyword If    "${gst_amount}" > 0 and "${gst_amount}" != "."    Evaluate    ${total_tax} - ${gst_amount}
    Set Test Variable    ${gst_amount_${number_of_fares}}    ${gst_amount}
    Set Test Variable    ${tax_amount_${number_of_fares}}    ${total_tax}
    Set Test Variable    ${total_tax_less_gst_${number_of_fares}}    ${total_tax_less_gst}
    Set Test Variable    ${currency}
    Set Test Variable    ${total_fare_${number_of_fares}}    ${total_fare}

Get Base Fare And Tax From Sabre For Fare X Tab
    [Arguments]    ${fare_tab}    ${currency}    ${store_fare_command}=WPRQ'S    ${use_copy_content_from_sabre}=True
    ${fare_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    Retrieve PNR Details From Sabre Red    ${current_pnr}    ${store_fare_command}${fare_index}    use_copy_content_from_sabre=${use_copy_content_from_sabre}
    ${base_fare}    Get String Matching Regexp    ${currency.upper()}[0-9]+\.[0-9][0-9]    ${pnr_details}
    ${tax_amount}    Get String Matching Regexp    [0-9]+\.[0-9][0-9]XT    ${pnr_details}
    ${base_fare}    Remove All Non-Integer (retain period)    ${base_fare}
    ${tax_amount}    Remove All Non-Integer (retain period)    ${tax_amount}
    Set Suite Variable    ${fare_${fare_index}_base_fare}    ${base_fare}
    Set Suite Variable    ${tax_amount_${fare_index}}    ${tax_amount}
    [Teardown]    Take Screenshot

Get Base or Nett Fare Value
    [Arguments]    ${nett_fare}    ${base_fare}
    ${base_or_nett_fare_value}    Run Keyword If    "${nett_fare}" != "${EMPTY}" and "${nett_fare}" != "0"    Set Variable    ${nett_fare}
    ...    ELSE    Set Variable    ${base_fare}
    Set Test Variable    ${base_or_nett_fare_value}

Get Clipboard Data
    ${data_clipboard}    Run Keyword If    "${GDS_switch}" == "amadeus"    Get Clipboard Data Amadeus
    ...    ELSE IF    "${GDS_switch}" == "galileo" or "${GDS_switch}" == "apollo"    Get Clipboard Data Travelport
    ...    ELSE IF    "${GDS_switch}" == "sabre"    Get Clipboard Data Sabre
    Set Test Variable    ${data_clipboard}
    [Return]    ${data_clipboard}

Get Clipboard Data Galileo
    [Arguments]    ${command}
    Clear Data From Clipboard
    ${data_clipboard}    Get Data From GDS Screen    ${command}    True    galileo
    Log    ${data_clipboard}
    Set Test Variable    ${data_clipboard}

Get Clipboard Data Sabre
    [Arguments]    ${use_copy_content_from_sabre}=True
    Comment    Activate Sabre Red Workspace
    Comment    Clear Data From Clipboard
    Comment    Run Keyword If    ${use_copy_content_from_sabre}    Copy Content From Sabre
    ...    ELSE    Run Keywords    Send    {ALTDOWN}EA{ALTUP}
    ...    AND    Send    {ALTDOWN}EC{ALTUP}
    ...    AND    Sleep    2
    ...    AND    Send    {ESC}
    Comment    Send Keys    !e    a    ^c    {ESC}
    Comment    ${data_clipboard} =    Clip Get
    Comment    Log    ${data_clipboard.strip()}
    Comment    Set Test Variable    ${data_clipboard.strip()}
    ${data_clipboard}    Get Data From GDS Screen    gds=sabre
    Set Test Variable    ${data_clipboard}
    [Teardown]    Take Screenshot
    [Return]    ${data_clipboard}

Get Clipboard Data Travelport
    Win Activate    Window 1    ${EMPTY}
    Wait For Active Window    Window 1    ${EMPTY}
    Control Click    Window 1    ${EMPTY}    ${EMPTY}
    Clear Data From Clipboard
    Send    {CTRLDOWN}{HOME}{CTRLUP}
    Send    {CTRLDOWN}{SHIFTDOWN}{END}{SHIFTUP}{CTRLUP}
    Send    ^a
    Sleep    1
    Control Click    Window 1    ${EMPTY}    ${EMPTY}
    Send    ^c
    Sleep    1
    Send    {DOWN}
    Send    {END}
    ${data_clipboard}    Clip Get
    Log    ${data_clipboard}
    Set Test Variable    ${data_clipboard}    ${data_clipboard.strip()}
    [Teardown]    Take Screenshot
    [Return]    ${data_clipboard}

Get Discount or Rebate Value
    [Arguments]    ${mark_up_amount}    ${commission_rebate_amount}
    ${mark_up_amount}    Set Variable If    "${mark_up_amount}" == "${EMPTY}"    0    ${mark_up_amount}
    ${mark_up_amount}    Convert To Float    ${mark_up_amount}
    ${commission_rebate_amount}    Set Variable If    "${commission_rebate_amount}" == "${EMPTY}"    0    ${commission_rebate_amount}
    ${commission_rebate_amount}    Convert To Float    ${commission_rebate_amount}
    ${discount_or_rebate_value}    Set Variable If    ${mark_up_amount} > 0    ${mark_up_amount}    -${commission_rebate_amount}
    Set Test Variable    ${discount_or_rebate_value}

Get Discount or Rebate Value For CITI
    [Arguments]    ${mark_up_amount}
    ${mark_up_amount}    Set Variable If    "${mark_up_amount}" == "${EMPTY}"    0    ${mark_up_amount}
    ${mark_up_amount}    Convert To Float    ${mark_up_amount}
    Comment    ${commission_rebate_amount}    Set Variable If    "${commission_rebate_amount}" == "${EMPTY}"    0    ${commission_rebate_amount}
    Comment    ${commission_rebate_amount}    Convert To Float    ${commission_rebate_amount}
    Comment    ${discount_or_rebate_value}    Set Variable If    ${mark_up_amount} > 0    ${mark_up_amount}    -${commission_rebate_amount}
    Set Test Variable    ${discount_or_rebate_value}    ${mark_up_amount}

Get Fare Amount Value For Fare X Tab
    [Arguments]    ${fare_tab}
    [Documentation]    Kindly Run "Get Base Fare Value From Galileo For X Number Of Fares" Prior To This Keyword
    ${fare_tab_index} =    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${fare_tab_index}
    Click Panel    Air Fare
    Click Fare Tab    ${fare_tab}
    Click Details Tab
    Get High Fare Value    ${fare_tab}
    Get Charged Fare Value    ${fare_tab}
    Get Low Fare Value    ${fare_tab}
    Click Pricing Extras Tab
    Get Nett Fare Value    ${fare_tab}
    Get Mark-Up Amount Value    ${fare_tab}
    Get Commission Rebate Amount Value    ${fare_tab}
    Get Base or Nett Fare Value    ${nett_fare_value_${fare_tab_index}}    ${base_fare_value_${fare_tab_index}}
    Get Discount or Rebate Value    ${mark_up_value_${fare_tab_index}}    ${commission_rebate_value_${fare_tab_index}}
    ${computed_fare_amount}    Evaluate    ${base_or_nett_fare_value} + ${discount_or_rebate_value}
    Set Test Variable    ${fare_amount_${fare_tab_index}}    ${computed_fare_amount}

Get Fare Amount Value For Fare X Tab For CITI
    [Arguments]    ${fare_tab}
    [Documentation]    Kindly Run "Get Base Fare Value From Galileo For X Number Of Fares" Prior To This Keyword
    ${fare_tab_index} =    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${fare_tab_index}
    Click Panel    Air Fare
    Click Fare Tab    ${fare_tab}
    Click Details Tab
    Get High Fare Value    ${fare_tab}
    Get Charged Fare Value    ${fare_tab}
    Get Low Fare Value    ${fare_tab}
    Click Pricing Extras Tab
    Get Nett Fare Value    ${fare_tab}
    Get Mark-Up Amount Value    ${fare_tab}
    Get Base or Nett Fare Value    ${nett_fare_value_${fare_tab_index}}    ${base_fare_value_${fare_tab_index}}
    Get Discount or Rebate Value For CITI    ${mark_up_value_${fare_tab_index}}
    ${computed_fare_amount}    Evaluate    ${base_or_nett_fare_value} + ${discount_or_rebate_value}
    Set Test Variable    ${fare_amount_${fare_tab_index}}    ${computed_fare_amount}

Get Fare Basis From PQ
    [Arguments]    ${fare_tab}
    ${fare_tab_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    ${fare_basis_line}    Get String Matching Regexp    (ADT\\-[0-9]+)\\s+([a-zA-Z0-9]+)    ${pnr_details}
    ${fare_basis}    Fetch From Right    ${fare_basis_line}    ADT-01
    Set Test Variable    ${pq_fare_basis_${fare_tab_index}}    ${fare_basis.strip()}

Get Itinerary Remarks From Galileo For Fare X
    [Arguments]    ${fare_tab}
    ${fare_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${fare_index}
    : FOR    ${counter}    IN RANGE    1    ${fare_index}+1
    \    ${next_fare}    Determine If Next Quote Exists    ${counter}
    \    ${subset}    Get String Between Strings    ${pnr_details}    QUOTE NUMBER: ${counter}    ${next_fare}
    Set Test Variable    ${pnr_details}    ${subset}

Get LCC Remarks
    ${lcc_identifier}    Set Variable If    '${GDS_switch.lower()}' == 'sabre'    H-F‡    '${GDS_switch.lower()}' == 'apollo'    F/    '${GDS_switch.lower()}' == 'amadeus'
    ...    RMF${space}
    ${lcc_remarks}    Get Lines Containing String    ${pnr_details}    ${lcc_identifier}LCC
    ${actual_lcc_remarks}    Split To Lines    ${lcc_remarks}
    ${collection_of_lcc_remarks}    Create List
    : FOR    ${lcc_remark}    IN    @{actual_lcc_remarks}
    \    ${converted_lcc_remark}    Convert To String    ${lcc_remark}
    \    ${converted_lcc_remark}    Fetch From Right    ${converted_lcc_remark}    ${lcc_identifier}
    \    ${converted_lcc_remark}    Replace String    ${converted_lcc_remark}    ‡    ${SPACE}
    \    Append To List    ${collection_of_lcc_remarks}    ${converted_lcc_remark.strip()}
    ${collection_of_lcc_remarks}    Remove Duplicates    ${collection_of_lcc_remarks}
    Log List    ${collection_of_lcc_remarks}
    [Return]    ${collection_of_lcc_remarks}

Get Line Number In PNR Remarks
    [Arguments]    ${string_to_search}
    Set Test Variable    ${line_0001}    ${EMPTY}
    @{lines}=    Split to lines    ${pnr_details}
    : FOR    ${line}    IN    @{lines}
    \    ${eval_line} =    Run Keyword and Return Status    Should Contain    ${line}    ${string_to_search}
    \    Run Keyword If    "${eval_line}" == "True"    Set Test Variable    ${line_0001}    ${line}
    \    #This will only get the last string match; Need to refactor if last string matched is not the expected line number
    ${line_0001}    Fetch from Left    ${line_0001}    .
    ${line_0001}    Remove Leading and Ending Spaces    ${line_0001}
    Set Test Variable    ${line_num}    ${line_0001}
    [Return]    ${line_0001}

Get Lowest Fare Value
    [Arguments]    ${computed_charged_fare}    ${low_fare}    ${mark_up_amount}
    ${low_fare}    Evaluate    ${low_fare} + ${mark_up_amount}
    ${lowest_fare_value}    Run Keyword If    ${computed_charged_fare} < ${low_fare}    Set Variable    ${computed_charged_fare}
    ...    ELSE    Set Variable    ${low_fare}
    Set Test Variable    ${lowest_fare_value}

Get PCC and Team ID from GDS Logs in Sabre Red
    ${team_line}    Get Lines Containing String    ${pnr_details}    TEAM
    ${team_line}    Remove All Spaces    ${team_line}
    ${teamid} =    Fetch From Right    ${team_line}    TEAM
    Set Test Variable    ${teamid}
    ${pcc_line}    Get Lines Containing String    ${pnr_details}    PCC
    ${pcc_line}    Remove All Spaces    ${pcc_line}
    ${pcc}    Fetch From Right    ${pcc_line}    PCC
    Set Test Variable    ${pcc}

Get RF, SF and LF value For Fare X Tab
    [Arguments]    ${fare_tab}
    [Documentation]    Kindly Run "Get Base Fare Value From Galileo For X Number Of Fares" Prior To This Keyword
    ${fare_tab_index} =    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${fare_tab_index}
    Click Panel    Air Fare
    Click Fare Tab    ${fare_tab}
    Click Details Tab
    Get High Fare Value    ${fare_tab}
    Get Charged Fare Value    ${fare_tab}
    Get Low Fare Value    ${fare_tab}
    Click Pricing Extras Tab
    Get Nett Fare Value    ${fare_tab}
    Get Mark-Up Amount Value    ${fare_tab}
    Get Commission Rebate Amount Value    ${fare_tab}
    Get Base or Nett Fare Value    ${nett_fare_value_${fare_tab_index}}    ${base_fare_value_${fare_tab_index}}
    Get Discount or Rebate Value    ${mark_up_value_${fare_tab_index}}    ${commission_rebate_value_${fare_tab_index}}
    ${computed_charged_fare}    Evaluate    ${base_or_nett_fare_value} + ${tax_amount_${fare_tab_index}} + ${discount_or_rebate_value}
    ${computed_charged_fare}    Run Keyword If    "${currency}" == "HKD"    Convert To String    ${computed_charged_fare}
    ...    ELSE    Set Variable    ${computed_charged_fare}
    ${computed_charged_fare}    Run Keyword If    "${currency}" == "HKD"    Fetch From Left    ${computed_charged_fare}    .
    ...    ELSE    Set Variable    ${computed_charged_fare}
    ${set_mark_up_amount}    Set Variable If    "${mark_up_value_${fare_tab_index}}" == "${EMPTY}"    0    ${mark_up_value_${fare_tab_index}}
    Get Selling Fare Value    ${base_or_nett_fare_value}    ${set_mark_up_amount}
    Get Lowest Fare Value    ${computed_charged_fare}    ${low_fare_value_${fare_tab_index}}    ${set_mark_up_amount}
    Get Ref Fare Value    ${computed_charged_fare}    ${high_fare_value_${fare_tab_index}}
    Comment    Set Test Variable    ${commission_rebate_value_${fare_tab_index}}
    Set Test Variable    ${base_or_nett_fare_value_${fare_tab_index}}    ${base_or_nett_fare_value}
    Set Test Variable    ${lowest_fare_value_${fare_tab_index}}    ${lowest_fare_value}
    Set Test Variable    ${ref_fare_value_${fare_tab_index}}    ${ref_fare_value}
    Set Test Variable    ${selling_fare_value_${fare_tab_index}}    ${selling_fare_value}

Get Ref Fare Value
    [Arguments]    ${computed_charged_fare}    ${high_fare}
    ${high_fare}    Set Variable If    ${computed_charged_fare} > ${high_fare}    ${computed_charged_fare}    ${high_fare}
    ${ref_fare_value}    Run Keyword If    "${currency}" == "HKD"    Fetch From Left    ${high_fare}    .
    ...    ELSE    Set Variable    ${high_fare}
    Set Test Variable    ${ref_fare_value}

Get Selling Fare Value
    [Arguments]    ${fare_value}    ${mark_up_amount}
    ${selling_fare_value}    Evaluate    ${fare_value} + ${mark_up_amount}
    Set Test Variable    ${selling_fare_value}

Get Shell PNR Remark Line
    [Arguments]    ${current_pnr}=${EMPTY}
    Retrieve PNR Details    ${current_pnr}
    ${shell_pnr_line}    Set Variable If    "${gds_switch}" == "galileo" or "${gds_switch}" == "apollo"    T \ ** \ TEXT **    #${EMPTY} #Reserved for other GDS
    ${shell_pnr_line}    Get Lines Containing String    ${pnr_details}    ${shell_pnr_line}
    ${shell_pnr_line}    Remove Line Number    ${shell_pnr_line}
    Set Test Variable    ${shell_pnr_line}

Get TST Number
    [Arguments]    ${segment_number}
    ${tst_line_using_segment}    Get Lines Using Regexp    ${data_clipboard}    ${charged_fare_${fare_tab_index}}+.+${segment_number[1:]}
    ${tst0_line}    Get Lines Containing String    ${data_clipboard}    TST0
    ${tst_line_raw}    Run Keyword If    "${tst0_line}" != "${EMPTY}"    Split String    ${tst0_line}    ${SPACE}
    ...    ELSE    Split String    ${tst_line_using_segment}    ${SPACE}
    ${tst_number}    Run Keyword If    "${tst0_line}" != "${EMPTY}"    Remove String Using Regexp    ${tst_line_raw[0]}    TST.0*
    ...    ELSE    Evaluate    ''.join(${tst_line_raw[:1]})
    Set Test Variable    ${tst_number}    T${tst_number}

Get Tax Amount For Specific Tax Type On Fare X
    [Arguments]    ${tax_type}    ${fare_tab}
    ${fare_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    Set Test Variable    ${fare_index}
    ${x_tax_value}    Get String Matching Regexp    [0-9]+\.[0-9]+${tax_type}    ${pnr_details}
    ${x_tax_value}    Remove All Non-Integer (retain period)    ${x_tax_value}
    Set Test Variable    ${x_tax_value_${fare_index}}    ${x_tax_value}

Get Total Fare From Galileo
    [Arguments]    ${fare_tab}    ${segment_number}    ${current_pnr}=${EMPTY}
    ${fare_tab_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    Retrieve PNR Details From Travelport    ${current_pnr}    *FF${segment_number}    \    \    False
    ${total_fare_line} =    Get Lines Using Regexp    ${pnr_details}    ADT.*G
    ${total_fare_raw} =    Fetch From Right    ${total_fare_line}    ${SPACE}
    ${total_fare} =    Remove All Non-Integer (retain period)    ${total_fare_raw}
    @{currency_and_total_fare_raw} =    Split String    ${total_fare_line}
    Set Suite Variable    ${total_fare_${fare_tab_index}}    ${total_fare}
    Set Suite Variable    ${currency_and_total_fare_${fare_tab_index}}    ${currency_and_total_fare_raw[-2:-1]}
    [Return]    ${total_fare_${fare_tab_index}}

Get Total For All Tickets From Galileo For X Number Of Fares
    [Arguments]    ${number_of_fares}=1
    Set Test Variable    ${total_for_all_tickets_value}    0
    Retrieve PNR Details From Travelport    ${current_pnr}    *RI
    : FOR    ${counter}    IN RANGE    1    ${number_of_fares}+1
    \    ${next_fare}    Determine If Next Quote Exists    ${counter}
    \    ${subset}    Get String Between Strings    ${pnr_details}    QUOTE NUMBER: ${counter}    ${next_fare}
    \    ${total_amount_value}    Get Lines Containing String    ${subset}    TOTAL AMOUNT
    \    ${total_amount_value}    Fetch From Right    ${total_amount_value}    TOTAL AMOUNT:
    \    ${total_amount_value}    Remove Leading And Ending Spaces    ${total_amount_value}
    \    ${currency}    Get Substring    ${total_amount_value}    0    3
    \    ${total_amount_value}    Remove All Non-Integer (retain period)    ${total_amount_value}
    \    ${total_for_all_tickets_value}    Evaluate    ${total_amount_value} + ${total_for_all_tickets_value}
    Set Test Variable    ${currency}
    Set Test Variable    ${total_for_all_tickets_value}

Get Validating Carrier From PQ
    [Arguments]    ${fare_tab}
    ${fare_tab_index}    Fetch From Right    ${fare_tab}    ${SPACE}
    ${validating_carrier_line}    Get String Matching Regexp    VALIDATING CARRIER(\\s+[a-zA-Z]+)?\\s+\\-\\s+[a-zA-Z]{2}    ${pnr_details}
    ${validating_carrier}    Fetch From Right    ${validating_carrier_line}    -
    Set Test Variable    ${validating_carrier_${fare_tab_index}}    ${validating_carrier.strip()}

Handle Send To PNR Error - Sabre GDS
    Activate Sabre Red Workspace
    Sleep    2
    Send    5/{ENTER}
    Sleep    5
    Activate Power Express Window

Handle Ticketing Information Error - Galileo GDS
    [Arguments]    ${gds_command}
    Sleep    2
    Activate Travelport Window
    Send    {TAB}1{TAB}
    Sleep    1
    Send    {ENTER}
    Sleep    2
    Send    ${gds_command}{ENTER}
    Sleep    2
    Send    R.CWTPTEST{ENTER}
    Sleep    2
    Send    ER{ENTER}
    Sleep    2
    Send    *R{ENTER}
    Sleep    2
    Send    {CTRLDOWN}{HOME}{CTRLUP}
    Sleep    1
    Send    {CTRLDOWN}{SHIFTDOWN}{END}{SHIFTUP}{CTRLUP}
    Sleep    1
    Send    ^c
    Sleep    3

Handle Ticketing Information Error - Galileo GDS Via Power Express
    [Arguments]    ${gds_command}
    Click GDS Screen Tab
    Enter GDS Command    ${gds_command}    R.CWTPTEST    ER    *R

Modify PNR Remark
    [Arguments]    ${original_remark}    ${new_remark}    ${galileo_remark_type}=${EMPTY}
    Activate GDS Native
    : FOR    ${INDEX}    IN RANGE    21
    \    ${line_number}    Run Keyword If    "${GDS_switch.lower()}" != "amadeus"    Get Line Number In PNR Remarks    ${original_remark}
    \    ...    ELSE    Get Line Number In Amadeus PNR Remarks    ${original_remark}
    \    ${modify_remark_command}    Set Variable If    "${GDS_switch}" == "sabre"    5${line_number}¤${new_remark}    "${GDS_switch}" == "amadeus"    ${line_number}/${new_remark}
    \    ...    "${GDS_switch}" == "galileo"    ${galileo_remark_type}.${line_number}@FT-${new_remark}
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ${modify_remark_command}
    \    ...    ELSE    Send    ${modify_remark_command}{ENTER}
    \    ${data_clipboard}    Get Clipboard Data
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain Any    ${data_clipboard.upper()}    SIMULT    PARALLEL
    \    ...    MODIFIFICATIONS
    \    Run Keyword If    "${GDS_switch}" == "amadeus" and ${is_simultaneous_exist} == True    Retrieve PNR Details From Amadeus    ${current_pnr}
    \    Exit For Loop If    ${is_simultaneous_exist} == False

Modify Transaction Codes
    [Arguments]    ${original_code}    ${new_code}    ${galileo_remark_type}=${EMPTY}
    Determine Received From Text
    ${ignore_command}    Set Variable If    "${GDS_switch}" != "amadeus"    I{ENTER}    IG{ENTER}
    ${original_7311}    Set Variable If    "${GDS_switch}" == "amadeus"    \\*7311\\*${original_code}    "${GDS_switch}" == "sabre"    .*7311*${original_code}    "${GDS_switch}" == "galileo"
    ...    *7311*${original_code}
    ${original_6311}    Set Variable If    "${GDS_switch}" == "amadeus"    \\*6311\\*${original_code}    "${GDS_switch}" == "sabre"    .*6311*${original_code}    "${GDS_switch}" == "galileo"
    ...    *6311*${original_code}
    ${original_1311}    Set Variable If    "${GDS_switch}" == "amadeus"    \\*1311\\*${original_code}    "${GDS_switch}" == "sabre"    .*1311*${original_code}    "${GDS_switch}" == "galileo"
    ...    *1311*${original_code}
    ${original_3311}    Set Variable If    "${GDS_switch}" == "amadeus"    \\*3311\\*${original_code}    "${GDS_switch}" == "sabre"    .*3311*${original_code}    "${GDS_switch}" == "galileo"
    ...    *3311*${original_code}
    ${new_7311}    Set Variable If    "${GDS_switch}" == "amadeus"    *7311*${new_code}    "${GDS_switch}" == "sabre"    .*7311*${new_code}    "${GDS_switch}" == "galileo"
    ...    *7311*${new_code}
    ${new_6311}    Set Variable If    "${GDS_switch}" == "amadeus"    *6311*${new_code}    "${GDS_switch}" == "sabre"    .*6311*${new_code}    "${GDS_switch}" == "galileo"
    ...    *6311*${new_code}
    ${new_1311}    Set Variable If    "${GDS_switch}" == "amadeus"    *1311*${new_code}    "${GDS_switch}" == "sabre"    .*1311*${new_code}    "${GDS_switch}" == "galileo"
    ...    *1311*${new_code}
    ${new_3311}    Set Variable If    "${GDS_switch}" == "amadeus"    *3311*${new_code}    "${GDS_switch}" == "sabre"    .*3311*${new_code}    "${GDS_switch}" == "galileo"
    ...    *3311*${new_code}
    : FOR    ${ctr}    IN RANGE    1    11
    \    Run Keyword If    "${GDS_switch}" == "sabre"    Retrieve PNR Details From Sabre Red    ${current_pnr}    *.    2
    \    Run Keyword If    "${GDS_switch}" == "galileo"    Retrieve PNR Details From Travelport    ${current_pnr}    *DI
    \    Run Keyword If    "${GDS_switch}" == "amadeus"    Retrieve PNR Details From Amadeus    ${current_pnr}
    \    Modify PNR Remark    ${original_7311}    ${new_7311}    ${galileo_remark_type}
    \    Modify PNR Remark    ${original_6311}    ${new_6311}    ${galileo_remark_type}
    \    Modify PNR Remark    ${original_1311}    ${new_1311}    ${galileo_remark_type}
    \    Modify PNR Remark    ${original_3311}    ${new_3311}    ${galileo_remark_type}
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ${received_from}{ENTER}
    \    ...    ELSE    Send    ${received_from}{ENTER}
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ER{ENTER}
    \    ...    ELSE    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain Any    ${data_clipboard}    SIMULT    PARALLEL
    \    ...    MODIFIFICATIONS
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ER{ENTER}
    \    ...    ELSE    Send    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data
    \    ${is_simultaneous_exist2}    Run Keyword And Return Status    Should Contain Any    ${data_clipboard}    SIMULT    PARALLEL
    \    ...    MODIFIFICATIONS
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    RT{ENTER}    ${ignore_command}
    \    ...    ELSE    Send    ${ignore_command}
    \    Exit For Loop If    ${is_simultaneous_exist} == False and ${is_simultaneous_exist2} == False

Move Down Until End Of Scroll
    [Arguments]    ${use_copy_content_from_sabre}=True
    Activate Sabre Red Workspace
    Clear Data From Clipboard
    : FOR    ${INDEX}    IN RANGE    20
    \    Run Keyword If    ${use_copy_content_from_sabre}    Send Sabre Command    MD
    \    ...    ELSE    Run Keywords    Sleep    1
    \    ...    AND    Send    MD{ENTER}
    \    ${data_clipboard}    Get Clipboard Data Sabre    ${use_copy_content_from_sabre}
    \    ${is_nothing_to_scroll_or_end_of_scroll} =    Run Keyword And Return Status    Should Contain Any    ${data_clipboard}    NOTHING TO SCROLL    END OF SCROLL
    \    Exit For Loop If    ${is_nothing_to_scroll_or_end_of_scroll} == True

Move Down X Times
    [Arguments]    ${number_of_down}
    Activate Sabre Red Workspace
    : FOR    ${INDEX}    IN RANGE    1    ${number_of_down} + 1
    \    Send Sabre Command    MD

Remove PNR Remark
    [Arguments]    ${remark}    ${galileo_remark_type}=${EMPTY}
    ${line_number}    Run Keyword If    "${GDS_switch}" != "amadeus"    Get Line Number In PNR Remarks    ${remark}
    ...    ELSE    Get Line Number In Amadeus PNR Remarks    ${remark}
    ${remove_command}    Set Variable If    "${GDS_switch}" == "sabre"    5${line_number}¤    "${GDS_switch}" == "amadeus"    XE${line_number}    "${GDS_switch}" == "galileo"
    ...    ${galileo_remark_type}.${line_number}@
    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ${remove_command}{ENTER}
    ...    ELSE    Send    ${remove_command}{ENTER}

Remove PNR Remark And End Transaction
    [Arguments]    ${remark}    ${galileo_remark_type}=${EMPTY}
    Determine Received From Text
    ${ignore_command}    Set Variable If    "${GDS_switch}" != "amadeus"    I{ENTER}    IG{ENTER}
    : FOR    ${ctr}    IN RANGE    1    11
    \    Run Keyword If    "${GDS_switch}" == "sabre"    Retrieve PNR Details From Sabre Red    ${current_pnr}    *.    2
    \    Run Keyword If    "${GDS_switch}" == "galileo"    Retrieve PNR Details From Travelport    ${current_pnr}    *DI
    \    Run Keyword If    "${GDS_switch}" == "amadeus"    Retrieve PNR Details From Amadeus    ${current_pnr}
    \    Remove PNR Remark    ${remark}    ${galileo_remark_type}
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ${received_from}{ENTER}
    \    ...    ELSE    Send    ${received_from}{ENTER}
    \    Sleep    2
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    ER{ENTER}
    \    ...    ELSE    Send    ER{ENTER}
    \    Sleep    2
    \    Run Keyword If    "${GDS_switch}" == "amadeus"    Enter GDS Command    ER{ENTER}
    \    Sleep    2
    \    ${data_clipboard}    Get Clipboard Data
    \    ${is_simultaneous_exist}    Run Keyword And Return Status    Should Contain Any    ${data_clipboard.upper()}    SIMULT    PARALLEL
    \    ...    MODIFIFICATIONS    AVERTISSEMENT : VERIFIER LE CODE D'ETAT OSI/SSR
    \    Run Keyword If    "${GDS_switch}" == "amadeus" or "${GDS_switch}" == "sabre"    Enter GDS Command    RT{ENTER}    IG
    \    ...    ELSE    Send    ${ignore_command}
    \    Exit For Loop If    ${is_simultaneous_exist} == False

Retrieve PNR Details
    [Arguments]    ${current_pnr}
    Run Keyword If    "${gds_switch}" == "galileo" or "${gds_switch}" == "apollo"    Retrieve PNR Details From Travelport    ${current_pnr}
    ...    ELSE IF    "${gds_switch}" == "sabre"    Retrieve PNR Details From Sabre Red    ${current_pnr}
    ...    ELSE IF    "${gds_switch}" == "amadeus"    Retrieve PNR Details From Amadeus    ${current_pnr}

Retrieve PNR Details From Galileo
    [Arguments]    ${current_pnr}=${EMPTY}    ${command}=*ALL
    Run Keyword If    "${current_pnr}" != "${EMPTY}"    Enter GDS Command    *${current_pnr}
    Run Keyword If    "${command}" != "${EMPTY}"    Enter GDS Command    ${command}
    ${pnr_details}    Set Variable    ${EMPTY}
    ${previous_clipboard}    Set Variable    ${EMPTY}
    : FOR    ${index}    IN RANGE    0    50
    \    ${data_clipboard}    Get Data From GDS Screen    ${EMPTY}    True    galileo
    \    Exit For Loop If    """${data_clipboard}""" == """${previous_clipboard}"""
    \    ${previous_clipboard}    Set Variable    ${data_clipboard}
    \    ${pnr_details} =    Catenate    SEPARATOR=${\n}    ${pnr_details}    ${previous_clipboard}
    \    Enter GDS Command    MD
    Set Test Variable    ${pnr_details}
    Log    ${pnr_details}

Retrieve PNR Details From Sabre Red
    [Arguments]    ${pnr}=${EMPTY}    ${command}=${EMPTY}    ${move_down}=Until End Of Scroll    ${default_sleep}=5    ${use_copy_content_from_sabre}=True
    Comment    Activate Sabre Red Workspace
    Comment    Clear Data From Clipboard
    Comment    Send    ^!{BS}
    Comment    Sleep    2
    Comment    Run Keyword If    "${pnr}" != "${EMPTY}"    Send Sabre Command    *${pnr}    *R
    Comment    Comment    Run Keyword If    "${pnr}" != "${EMPTY}"    Send Sabre Command    IG    *${pnr}
    Comment    ${command}    Replace String    ${command}    ‡    '
    Comment    Run Keyword If    "${command}" != "${EMPTY}" and "${use_copy_content_from_sabre}" == "True"    Send Sabre Command    ${command}
    ...    ELSE IF    "${command}" != "${EMPTY}" and "${use_copy_content_from_sabre}" == "False"    Send    ${command}{ENTER}
    Comment    Run Keyword If    "${move_down}" != "Until End Of Scroll"    Move Down X Times    ${move_down}
    ...    ELSE    Move Down Until End of Scroll    ${use_copy_content_from_sabre}
    Comment    ${pnr_details}    Get Clipboard Data Sabre    ${use_copy_content_from_sabre}
    Comment    Set Test Variable    ${pnr_details}    ${pnr_details.strip()}
    Comment    Log    ${pnr_details}
    Run Keyword If    "${pnr}" != "${EMPTY}"    Enter GDS Command    I    *${pnr}
    ...    ELSE    Enter GDS Command    *R
    ${command}    Replace String    ${command}    '    ‡
    Run Keyword If    "${command}" != "${EMPTY}"    Enter GDS Command    ${command}
    ${pnr_details}    Get Data From GDS Screen    \    \    sabre
    ${pnr_details}    Replace String    ${pnr_details}    Â    ‡
    Set Test Variable    ${pnr_details}    ${pnr_details.strip()}
    Log    ${pnr_details}
    [Teardown]    Take Screenshot
    [Return]    ${pnr_details}

Retrieve PNR Details From Travelport
    [Arguments]    ${current_pnr}=${EMPTY}    ${gds_command}=*ALL    ${wait_time}=1    ${project}=non-apac    ${performl_md}=True
    Activate Travelport Window
    Run Keyword If    '${current_pnr}' != '${EMPTY}'    Run Keywords    Send    *${current_pnr}{ENTER}
    ...    AND    Sleep    2
    ...    ELSE    Send    *R{ENTER}
    ${gds_command}    Replace String    ${gds_command}    +    {SHIFTDOWN}={SHIFTUP}
    Run Keyword If    '${gds_command}' != '${EMPTY}'    Send    *R{ENTER}
    ${pnr_details} =    Run Keyword If    '${gds_command}' == '*ALL'    Get All Data From Smart Panel
    ...    ELSE    Get All Data From Terminal Window    ${gds_command}    ${wait_time}    ${performl_md}
    Set Test Variable    ${pnr_details}
    Log    ${pnr_details}
    [Teardown]    Take Screenshot
    [Return]    ${pnr_details}
