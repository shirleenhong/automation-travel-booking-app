*** Settings ***
Resource          ../../resources/common/global_resources.txt
Resource          ../database/database_verification.txt
Resource          ../air_fare/air_fare_verification.txt
Resource          ../apis_sfpd/apis_sfpd_verification.txt
Resource          ../cust_refs/cust_refs_verification.txt
Resource          ../../resources/panels/gds_screen.txt
Resource          ../../resources/common/gds_native.txt

*** Keywords ***
Generate Time For TAW Line
    ${hour}    DateTime.Get Current Date    result_format=%I
    ${clock_identifier}    DateTime.Get Current Date    result_format=%p
    ${clock_identifier}    Set Variable If    "${clock_identifier}" == "AM"    A    P
    Set Suite Variable    ${taw_current_time}    ${hour}00${clock_identifier}

Get Ticketing Date From Apollo PNR
    ${ticketing_date_marker}    Set Variable If    '${gds_switch}' == 'apollo'    TKTG-TAU/24LY/
    ${ticketing_date_line}    Get Lines Containing String    ${pnr_details}    ${ticketing_date_marker}
    ${ticketing_date_array}    Split String    ${ticketing_date_line}    ${ticketing_date_marker}
    ${ticketing_date_line}    Remove All Spaces    ${ticketing_date_array[1]}
    ${ticketing_date_month}    Get Substring    ${ticketing_date_line}    4    7
    ${ticketing_date_day}    Get Substring    ${ticketing_date_line}    2    4
    Set Test Variable    ${ticketing_date_month}
    Set Test Variable    ${ticketing_date_day}

Get Ticketing Date From Sabre PNR
    ${ticketing_date_marker}    Set Variable If    '${gds_switch}' == 'sabre'    1.TAW3W7FQC/ETK
    ${ticketing_date_line}    Get Lines Containing String    ${pnr_details}    ${ticketing_date_marker}
    ${ticketing_date_array}    Split String    ${ticketing_date_line}    ${ticketing_date_marker}
    ${ticketing_date_line}    Remove All Spaces    ${ticketing_date_array[1]}
    ${ticketing_date_month}    Get Substring    ${ticketing_date_line}    2    5
    ${ticketing_date_day}    Get Substring    ${ticketing_date_line}    0    2
    Set Test Variable    ${ticketing_date_month}
    Set Test Variable    ${ticketing_date_day}

Get Ticketing Line From Apollo PNR
    Get Ticketing Date From Apollo PNR
    Get Ticketing Date Year    ${ticketing_date_month}    ${ticketing_date_day}
    ${ticketing_date}    Convert Date To Syex Format    ${ticketing_date_month}${ticketing_date_day}${date_year}    %b%d%Y
    Set Suite Variable    ${ticketing_date}

Get Ticketing Line From Sabre PNR
    Get Ticketing Date From Sabre PNR
    Get Ticketing Date Year    ${ticketing_date_month}    ${ticketing_date_day}
    ${ticketing_date}    Convert Date To Syex Format    ${ticketing_date_month}${ticketing_date_day}${date_year}    %b%d%Y
    Set Suite Variable    ${ticketing_date}

Remove Ticketing Date Not Set Confirm By Remark In Apollo PNR
    Retrieve PNR Details From Travelport    ${current_pnr}
    ${line_number}    Get Line Number In PNR Remarks    TICKETING DATE NOT SET CONFIRM BY
    Activate Power Express Window
    Run Keyword If    '${line_number}' != '${EMPTY}'    Enter GDS Command    C:${line_number}¤:5    R:CWTPTEST    ER    ER
    Run Keyword If    '${line_number}' == '${EMPTY}'    Enter GDS Command    I

Remove Ticketing Date Not Set Confirm By Remark In PNR
    Retrieve PNR Details From Sabre Red    ${current_pnr}    *P‡    0
    ${line_number}    Get Line Number In PNR Remarks    TICKETING DATE NOT SET CONFIRM BY
    Activate Power Express Window
    Run Keyword If    '${line_number}' != '${EMPTY}'    Enter GDS Command    5${line_number}¤    6CWTTEST    ER    ER
    Run Keyword If    '${line_number}' != '${EMPTY}'    Remove Ticketing Date Not Set Confirm By Remark In PNR
    Run Keyword If    '${line_number}' == '${EMPTY}'    Enter GDS Command    I

Verify Delivery Method Default Value Is Correct
    [Arguments]    ${expected_default_value}
    Verify Control Object Text Value Is Correct    ${combo_deliverMethod}    ${expected_default_value}
    [Teardown]    Take Screenshot

Verify Delivery Method Dropdown Values
    [Arguments]    @{expected_delivery_methods}
    ${actual_delivery_methods}    Get Dropdown Values    ${combo_deliverMethod}
    Run Keyword And Continue On Failure    List Should Contain Sub List    ${actual_delivery_methods}    ${expected_delivery_methods}

Verify Delivery Method Selected Is Reflected In The Ticketing Line
    [Arguments]    ${ticketing_line_prefix}    ${delivery_method_suffix}
    ${escaped_ticketing_line_prefix}    Regexp Escape    ${ticketing_line_prefix}
    ${escaped_delivery_method_suffix}    Regexp Escape    ${delivery_method_suffix}
    Verify Specific Line Is Written In The PNR    ${escaped_ticketing_line_prefix}\\D{2}\\d{2}\\D{3}${escaped_delivery_method_suffix}    true

Verify Email Address Remarks Are Written
    [Arguments]    ${email_address}
    Verify Specific Remark Is Written In The PNR    RMZ CONF*SEND TO MAIL ${email_address}
    Verify Specific Remark Is Written In The PNR    RM *EMAIL/${email_address}

Verify Invalid Ticketing Date Error Message Is Displayed
    [Arguments]    ${tooltip_text}
    Comment    ${is_error_present}    Run Keyword and Return Status    Object Exists    ${sikuli_image_path}\\ticketing_date_error_icon.png    0.95    ${timeout}
    Comment    ${pos_x}    Control Get Pos X    ${title_power_express}    ${EMPTY}    [Name:uccTicketingDate]
    Comment    ${pos_y}    Control Get Pos Y    ${title_power_express}    ${EMPTY}    [Name:uccTicketingDate]
    Comment    Auto It Set Option    MouseCoordMode    1
    Comment    Run Keyword If    "${is_error_present}" == "True"    Mouse Move    ${pos_x+115}    ${pos_y+35}
    Comment    ${ticketing_date_error}    Run Keyword If    "${locale}" == "fr-FR"    Run Keyword and Return Status    Object Exists    ${sikuli_image_path}\\ticketingdate_invalid_fr.PNG
    ...    0.95    ${timeout}
    ...    ELSE IF    "${locale}" == "en-US"    Run Keyword and Return Status    Object Exists    ${sikuli_image_path}\\ticketingdate_invalid.PNG    0.95
    ...    ${timeout}
    Comment    Run Keyword If    "${ticketing_date_error}" == "True"    Log    Invalid Ticketing Date Error message is Displayed
    ...    ELSE    Run Keyword and Continue on Failure    FAIL    Invalid Ticketing Date Error message is Not Displayed
    Comment    Run Keyword If    "${is_error_present}" == "True"    Mouse Move    ${pos_x+115}    ${pos_y}
    Comment    Auto It Set Option    MouseCoordMode    0
    Verify Ticketing Date Error Tooltip Message Is Correct    ${tooltip_text}
    [Teardown]    Take Screenshot

Verify Invalid Ticketing Date Error Message Is Not Displayed
    ${tooltip_presence}    Is Tooltip Present    229    581
    Should Be True    ${tooltip_presence} == False    msg=Invalid Ticketing Date Error Message should not be displayed
    [Teardown]    Take Screenshot

Verify On Hold Booking Reason Is Checked
    [Arguments]    ${on_hold_reason}
    ${is_checked}    Determine Selected On Hold Reason Code    ${on_hold_reason}
    Run Keyword And Continue On Failure    Should Be True    '${is_checked}' == 'True'    ${on_hold_reason} checkbox must be ticked.
    [Teardown]    Take Screenshot

Verify On Hold Booking Reason Is Disabled
    [Arguments]    ${onhold_reason}
    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data"    Set Test Variable    ${onhold_reason_obj}    ${check_box_holdreason0}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References"    Set Test Variable    ${onhold_reason_obj}    ${check_box_holdreason1}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details"    Set Test Variable    ${onhold_reason_obj}    ${check_box_holdreason2}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval"    Set Test Variable    ${onhold_reason_obj}    ${check_box_holdreason3}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Set Test Variable    ${onhold_reason_obj}    ${check_box_holdreason4}
    ...    ELSE    Run Keyword And Continue On Failure    FAIL    Onhold booking reason not found.
    ${is_checked}    ${is_enabled}    Get Checkbox Status (Onhold Reasons)    ${onhold_reason_obj}
    Run Keyword And Continue On Failure    Should Be True    '${is_enabled}' == 'False'    ${on_hold_reason} checkbox must be disabled.
    [Teardown]    Take Screenshot

Verify On Hold Booking Reason Is Displayed
    [Arguments]    ${on_hold_reason}
    ${on_hold_reason_field}    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data"    Set Variable    ${check_box_holdreason0}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References"    Set Variable    ${check_box_holdreason1}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details"    Set Variable    ${check_box_holdreason2}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval"    Set Variable    ${check_box_holdreason3}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Set Variable    ${check_box_holdreason4}
    ...    ELSE    Run Keyword And Continue On Failure    FAIL    Onhold booking reason not found.
    Verify Control Object Is Visible    ${on_hold_reason_field}
    Take Screenshot

Verify On Hold Booking Reason Is Not Displayed
    [Arguments]    ${on_hold_reason}
    ${on_hold_reason_field}    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data"    Set Variable    ${check_box_holdreason0}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References"    Set Variable    ${check_box_holdreason1}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details"    Set Variable    ${check_box_holdreason2}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval"    Set Variable    ${check_box_holdreason3}
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Set Variable    ${check_box_holdreason4}
    ...    ELSE    Run Keyword And Continue On Failure    FAIL    Onhold booking reason not found.
    Verify Control Object Is Not Visible    ${on_hold_reason_field}
    Take Screenshot

Verify On Hold Booking Reason Is Unchecked
    [Arguments]    ${on_hold_reason}
    ${is_checked}    Determine Selected On Hold Reason Code    ${on_hold_reason}
    Run Keyword And Continue On Failure    Should Be True    '${is_checked}' == 'False'    ${on_hold_reason} checkbox must not be ticked.
    [Teardown]    Take Screenshot

Verify On Hold Booking Reasons Are All Unchecked
    Verify On Hold Booking Reason Is Unchecked    Awaiting Customer References
    Verify On Hold Booking Reason Is Unchecked    Awaiting Secure Flight Data
    Verify On Hold Booking Reason Is Unchecked    Awaiting Fare Details
    Verify On Hold Booking Reason Is Unchecked    Awaiting Approval
    Verify On Hold Booking Reason Is Unchecked    Awaiting Itinerary Segment
    Verify On Hold Booking Reason Is Unchecked    Awaiting Form of Payment

Verify Policy Reason Is Not Displayed
    [Arguments]    ${expected_policy_reason}
    : FOR    ${index}    IN RANGE    0    10
    \    ${isVisible}    Control Command    Power Express    ${EMPTY}    [NAME:clblPolicyReason${index}]    IsVisible
    \    ...    ${EMPTY}
    \    Exit For Loop If    '${isVisible}' != '1'
    \    ${actual_policy_reason}    Get Control Text Value    [NAME:clblPolicyReason${index}]
    \    Run Keyword And Continue On Failure    Should Not Match    ${actual_policy_reason}    ${expected_policy_reason}    Policy reason '${expected_policy_reason}' should no longer be displayed in Quick Amend.

Verify Policy Status Does Not Contain Option
    [Arguments]    ${expected_policy_reason}    ${policy_status}
    : FOR    ${index}    IN RANGE    0    10
    \    ${isVisible}    Control Command    Power Express    ${EMPTY}    [NAME:clblPolicyReason${index}]    IsVisible
    \    ...    ${EMPTY}
    \    Run Keyword If    '${isVisible}' != '1'    Run Keyword And Continue On Failure    FAIL    Policy reason not found in list: ${expected_policy_reason}
    \    Exit For Loop If    '${isVisible}' != '1'
    \    ${actual_policy_reason}    Get Control Text Value    [NAME:clblPolicyReason${index}]
    \    @{actual_list}    Run Keyword If    '${actual_policy_reason}' == '${expected_policy_reason}'    Get Value From Dropdown List    ${cbo_policystatus${index}}
    \    Run Keyword If    '${actual_policy_reason}' == '${expected_policy_reason}'    Run Keyword And Continue On Failure    Run Keywords    List Should Not Contain Value    ${actual_list}
    \    ...    ${policy_status}
    \    ...    AND    Exit For Loop
    [Teardown]    Take Screenshot

Verify Policy Status Is Blank By Default
    [Arguments]    ${expected_policy_reason}
    : FOR    ${index}    IN RANGE    0    10
    \    ${isVisible}    Control Command    Power Express    ${EMPTY}    [NAME:clblPolicyReason${index}]    IsVisible
    \    ...    ${EMPTY}
    \    Run Keyword If    '${isVisible}' != '1'    Run Keyword And Continue On Failure    FAIL    Policy reason not found in list: ${expected_policy_reason}
    \    Exit For Loop If    '${isVisible}' != '1'
    \    ${actual_policy_reason}    Get Control Text Value    [NAME:clblPolicyReason${index}]
    \    Run Keyword If    '${actual_policy_reason}' == '${expected_policy_reason}'    Run Keywords    Verify Control Object Text Value Is Correct    ${cbo_policystatus${index}}    ${EMPTY}
    \    ...    AND    Exit For Loop
    [Teardown]    Take Screenshot

Verify Quick Amend Is Not Visible
    Verify Control Object Is Not Visible    ${label_quick_amend}
    Verify Control Object Is Not Visible    ${button_quick_amend}
    [Teardown]    Take Screenshot

Verify Quick Amend Is Visible
    Verify Control Object Is Visible    ${label_quick_amend}
    Verify Control Object Is Visible    ${button_quick_amend}
    [Teardown]    Take Screenshot

Verify Quick Amend Spiel Is Not Visible
    Verify Control Object Is Visible    ${label_quick_amend}
    [Teardown]    Take Screenshot

Verify Quick Amend Spiel Is Visible
    [Arguments]    ${expected_text}
    Verify Control Object Text Value Is Correct    ${label_quick_amend}    ${expected_text}
    [Teardown]    Take Screenshot

Verify Reasons For Placing Booking On Hold Section In Delivery Panel Is Disabled
    ${is_checked_0}    ${is_enabled_0}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason0}
    ${is_checked_1}    ${is_enabled_1}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason1}
    ${is_checked_2}    ${is_enabled_2}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason2}
    ${is_checked_3}    ${is_enabled_3}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason3}
    ${is_checked_4}    ${is_enabled_4}    Get Checkbox Status (Onhold Reasons)    ${check_box_holdreason4}
    Run Keyword If    "${is_enabled_0}" == "False" and "${is_enabled_1}" == "False" and "${is_enabled_2}" == "False" and "${is_enabled_3}" == "False" and "${is_enabled_4}" == "False"    Log    Verification Passed
    ...    ELSE    Run Keyword And Continue On Failure    FAIL    On Hold reasons must be disabled.
    [Teardown]    Take Screenshot

Verify Remarks for Itinerary Type
    [Arguments]    ${pcc}    ${queue_number}    ${queue_category}
    Verify Specific Remark Is Written In The PNR    OP ${pcc}/${current_date}/${queue_number}${queue_category}/SEND ITINERARY

Verify TAW Line For On-Hold Reason Is Not Written In The PNR
    [Arguments]    ${pcc}    ${queue_number}    ${on_hold_reason}
    ${ticketing_date}    Convert Date To Gds Format    ${default_ticketing_date}    %m/%d/%Y
    ${taw_time}    Set Variable If    "${current_date}" == "${ticketing_date}"    0400A    ${EMPTY}
    ${expected_on_hold_reason}    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data"    Set Variable    ONHOLD.AWAITING.SECURE.FLIGHT.DATA
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References"    Set Variable    ONHOLD.AWAITING.CUSTOMER.REFERENCES
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details"    Set Variable    ONHOLD.AWAITING.FARE.DETAILS
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval"    Set Variable    ONHOLD.AWAITING.APPROVAL
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Set Variable    ONHOLD.AWAITING.ITINERARY.SEGMENT
    ...    ELSE    Set Variable    ${EMPTY}
    ${expected_taw_line}    Set Variable If    "${taw_time}" == "${EMPTY}"    TAW${pcc}${ticketing_date}${queue_number}/${expected_on_hold_reason}    TAW${pcc}${ticketing_date}${queue_number}/${taw_time}/${expected_on_hold_reason}
    Verify Specific Remark Is Not Written In The PNR    ${expected_taw_line}

Verify TAW Line For On-Hold Reason Is Written In The PNR
    [Arguments]    ${pcc}    ${queue_number}    ${on_hold_reason}
    ${taw_time}    Set Variable If    "${date_today}" == "${ticketing_date}"    ${EMPTY}    0400A
    ${date_format}    Set Variable If    "${gds_switch}" == "sabre"    %d%B    %m/%d/%Y
    ${ticketing_date}    Convert Date To Gds Format    ${default_ticketing_date}    ${date_format}
    ${expected_on_hold_reason}    Run Keyword If    "${on_hold_reason}" == "Awaiting Secure Flight Data"    Set Variable    HOLD.AWAITING.SECURE.FLIGHT.DATA
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Customer References"    Set Variable    HOLD.AWAITING.CUSTOMER.REFERENCES
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Fare Details"    Set Variable    HOLD.AWAITING.FARE.DETAILS
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Approval"    Set Variable    HOLD.AWAITING.APPROVAL
    ...    ELSE IF    "${on_hold_reason}" == "Awaiting Itinerary Segment"    Set Variable    HOLD.AWAITING.ITINERARY.SEGMENT
    ...    ELSE    Set Variable    ${EMPTY}
    ${expected_taw_line}    Set Variable If    "${taw_time}" == "${EMPTY}"    TAW${pcc}${ticketing_date}${queue_number}/${expected_on_hold_reason}    TAW${pcc}${ticketing_date}${queue_number}/${taw_time}/${expected_on_hold_reason}
    Verify Specific Remark Is Written In The PNR    ${expected_taw_line}

Verify TAW Line For No On-Hold Reason Is Written In The PNR
    [Arguments]    ${pcc}    ${queue_number}
    ${ticketing_date}    Convert Date To Gds Format    ${default_ticketing_date}    %m/%d/%Y
    ${taw_time}    Set Variable If    "${current_date}" == "${ticketing_date}"    0400A    ${EMPTY}
    ${expected_taw_line}    Set Variable If    "${taw_time}" == "${EMPTY}"    TAW${pcc}QT${ticketing_date}    TAW${pcc}QT${ticketing_date}/${taw_time}
    Verify Specific Remark Is Written In The PNR    ${expected_taw_line}

Verify TAW Line For No On-Hold Reason Is Not Written In The PNR
    [Arguments]    ${pcc}    ${queue_number}    ${on_hold_reason}
    ${ticketing_date}    Convert Date To Gds Format    ${default_ticketing_date}    %m/%d/%Y
    ${taw_time}    Set Variable If    "${current_date}" == "${ticketing_date}"    0400A    ${EMPTY}
    ${expected_taw_line}    Set Variable If    "${taw_time}" == "${EMPTY}"    TAW${pcc}QT${ticketing_date}    TAW${pcc}QT${ticketing_date}/${taw_time}
    Verify Specific Remark Is Not Written In The PNR    ${expected_taw_line}

Verify That Correct Subject Line is Selected
    [Arguments]    ${SubjectLine}
    Verify Control Object Text Value Is Correct    [NAME:cboSubjectLine]    ${SubjectLine}

Verify That Follow Up Date Is Not Visible
    Verify Control Object Is Not Visible    [NAME:uccFollowupDate]
    [Teardown]    Take Screenshot

Verify That Subject Line Dropdown Is Not Visible
    Verify Control Object Is Not Visible    [NAME:cboSubjectLine]

Verify That Subject Line Dropdown Is Visible
    Verify Control Object Is Visible    [NAME:cboSubjectLine]

Verify Ticketing Date Field In PNR Is Not Changed
    Run Keyword If    '${gds_switch}' == 'apollo'    Get Ticketing Line From Apollo PNR
    Run Keyword If    '${gds_switch}' == 'sabre'    Get Ticketing Line From Sabre PNR
    Click Panel    Delivery
    ${ticketing_date_express}    Get Control Text Value    [NAME:uccTicketingDate]
    Should Be Equal As Strings    ${ticketing_date_express}    ${ticketing_date}

Verify Ticketing Date Field Value
    [Arguments]    ${expected_ticketing_date_value}    ${custom_message}=${EMPTY}
    Activate Power Express Window
    Verify Control Object Text Value Is Correct    [NAME:uccTicketingDate]    ${expected_ticketing_date_value}    ${custom_message}
    [Teardown]    Take Screenshot

Verify Ticketing Date Field Value Is Current Date
    ${current_date}    SyexDateTimeLibrary.Get Current Date
    Verify Ticketing Date Field Value    ${current_date}

Verify Ticketing Date Field Value Is LDT-1
    Verify Ticketing Date Field Value    ${ldt-1}    Ticketing date field should be LDT - 1 and should be equal to ${ldt-1}

Verify Ticketing Date Field Value Is Ticketing Date From PNR
    Verify Ticketing Date Field Value    ${ticketing_date}

Verify Ticketing Date Field Value Is Travel Date-1
    Verify Ticketing Date Field Value    ${travel_date-1}    Ticketing Date should be Traveldate - 1 and should be equal to ${travel_date-1}

Verify Ticketing Time Limit Field Is Enabled
    Verify Control Object Is Enabled    [NAME:ccboTimeLimit]
    [Teardown]    Take Screenshot

Verify Ticketing Time Limit Field Is Visible
    Verify Control Object Is Visible    [NAME:ccboTimeLimit]
    [Teardown]    Take Screenshot

Verify Ticketing Time Limit Field Value
    [Arguments]    ${expected_ticketing_time_limit_value}
    Verify Control Object Text Value Is Correct    [NAME:ccboTimeLimit]    ${expected_ticketing_time_limit_value}
    [Teardown]    Take Screenshot

Verify Time Limit Remarks Field Is Enabled
    Verify Control Object Is Enabled    [NAME:ctxtTimeRemarks]
    [Teardown]    Take Screenshot

Verify Time Limit Remarks Field Is Visible
    Verify Control Object Is Visible    [NAME:ctxtTimeRemarks]
    [Teardown]    Take Screenshot

Verify Time Limit Remarks Field Value
    [Arguments]    ${expected_ticket_time_limit_remarks}
    Verify Control Object Text Value Is Correct    [NAME:ctxtTimeRemarks]    ${expected_ticket_time_limit_remarks}
    [Teardown]    Take Screenshot

Verify Travel Date-1 Is Written In The Ticketing Line
    ${travel_date-1_syex}    Convert Date To Gds Format    ${travel_date-1}    %m/%d/%Y
    Run Keyword If    "${GDS_Switch.lower()}" == "sabre"    Verify Specific Line Is Written In The PNR    TAW3W7FQC/ETK ${travel_date-1_syex} HOLD AWAITING.
    ...    ELSE IF    "${GDS_Switch.lower()}" == "apollo"    Verify Specific Line Is Written In The PNR    TKTG-TAU/${travel_date-1_syex}¤24LY/ETK.HOLD.AWAITING.FARE.DETAILS

Verify Delivery Method Is Not Present
    [Arguments]    @{delivery_methods}
    @{actual_delivery_methods}    Get Dropdown Values    [NAME:ccboDeliveryMethod]
    : FOR    ${delivery_method}    IN    @{delivery_methods}
    \    List Should Not Contain Value    ${actual_delivery_methods}    ${delivery_method}

Verify The PNR Is Sent To Correct Queue Number
    [Arguments]    ${pcc}    ${queue_number}
    ${pnr_details}    Get String Between Strings    ${pnr_details}    CURRENTLY ON QUEUE    LOGGED HISTORY
    Verify Specific Remark Is Written In The PNR    ${pcc} ${queue_number.zfill(4)}/011 \ \ \ \ \ ${current_date}[0-9]{2}/[0-9]{4} PLACED    true

Verify Confirmation Is Selected As Default Itinerary Type
    ${radio_state}    Get Radio Button State    [NAME:rdoItinTypeConfirmation]
    Should Be True    ${radio_state} == True
    [Teardown]    Take Screenshot

Verify Itinerary Type Section Is Not Displayed
    Verify Control Object Is Not Visible    [NAME:grpItineraryType]
    Verify Control Object Is Not Visible    [NAME:rdoItinTypeConfirmation]
    Verify Control Object Is Not Visible    [NAME:rdoItinTypeETicket]
    [Teardown]    Take Screenshot

Verify Itinerary Type Section Is Displayed
    Verify Control Object Is Visible    [NAME:grpItineraryType]
    Verify Control Object Is Visible    [NAME:rdoItinTypeConfirmation]
    Verify Control Object Is Visible    [NAME:rdoItinTypeETicket]
    ${confirmation_label} =    Set Variable If    "${locale}" == "de-DE"    Reiseplan    Confirmation
    ${eticket_label} =    Set Variable If    "${locale}" == "fr-FR"    Reçu de e-ticket    "${locale}" == "de-DE"    E-Ticket    E-Ticket Notification
    ${actual_confirmation_label} =    Get Control Text    [NAME:rdoItinTypeConfirmation]    \    True
    ${actual_eticket_label} =    Get Control Text    [NAME:rdoItinTypeETicket]    \    True
    Should Be Equal As Strings    ${confirmation_label}    ${actual_confirmation_label}
    Should Be Equal As Strings    ${eticket_label}    ${actual_eticket_label}
    [Teardown]    Take Screenshot

Verify Ticketing Date Error Tooltip Message Is Correct
    [Arguments]    ${expected_tooltip_text}
    Verify Tooltip Text Is Correct Using Coords    237    616    ${expected_tooltip_text}

Verify Follow up Date Warning Tooltip Message Is Correct
    [Arguments]    ${expected_tooltip_text}
    Verify Tooltip Text Is Correct Using Coords    345    616    ${expected_tooltip_text}

Verify Follow up Date Warning Message is Not Displayed
    ${tooltip_presence}    Is Tooltip Present    343    581
    Should Be True    ${tooltip_presence} == False    msg=Follow up Date Warning Message should not be displayed

Verify Ticketing Date Warning Tooltip Message Is Correct
    [Arguments]    ${expected_tooltip_text}
    Run Keyword And Continue On Failure    Verify Tooltip Text Is Correct Using Coords    237    616    ${expected_tooltip_text}

Verify Invalid Ticketing Date Warning Message Is Not Displayed
    ${tooltip_presence}    Is Tooltip Present    229    581
    Should Be True    ${tooltip_presence} == False    msg=Invalid Ticketing Date Error Message should not be displayed
    [Teardown]    Take Screenshot

Verify Subject Line Option Is Retain Same
    [Arguments]    ${subject_line_value}
    Verify Control Object Text Contains Expected Value    [NAME:cboSubjectLine]    ${subject_line_value}

Verify That Subject Line Dropdown Is Visible,Empty And Mandatory
    Verify Control Object Is Visible    [NAME:cboSubjectLine]
    Verify Control Object Text Contains Expected Value    [NAME:cboSubjectLine]    ${EMPTY}
    Verify Control Object Background Color    [NAME:cboSubjectLine]    FFD700
    [Teardown]    Take Screenshot

Verify Subject Line Field Is Not Mandatory
    Verify Control Object Field Is Not Mandatory    [NAME:cboSubjectLine]
    [Teardown]    Take Screenshot

Verify Follow Up Date Field Value
    [Arguments]    ${expected_followup_date_value}    ${custom_message}=${EMPTY}
    Activate Power Express Window
    Verify Control Object Text Value Is Correct    [NAME:uccFollowupDate]    ${expected_followup_date_value}    ${custom_message}
    [Teardown]    Take Screenshot
